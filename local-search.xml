<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>心弦</title>
    <link href="/2020/08/27/%E5%BF%83%E5%BC%A6/"/>
    <url>/2020/08/27/%E5%BF%83%E5%BC%A6/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="abe5c07e9556fc3f8ad8d79c8c7037fcd0efc61488d80a6b904ca2ddec2fec0e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>悄悄话</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mask R-CNN论文笔记</title>
    <link href="/2020/08/26/Mask-R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/08/26/Mask-R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>未完。。。。。</p><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p>Mask R-CNN是一个实例分割模型，实例分割不仅要实现目标检测，还需要对目标进行精确的分割，即实例分割可以看成目标检测和语义分割的结合。</p><p>Mask R-CNN是Faster R-CNN的扩展，在Faster R-CNN的基础上添加一个用于预测<code>object mask</code>的并行分支，该分支是一个小型的FCN。</p><p>Mask R-CNN引入了RoIAlign用来替换RoIPool层，因为RoIPool不是按照像素一一对齐的，使用RoIAlign后mask的精度从10%提高到50%。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200826170930.png" srcset="/img/loading.gif" alt=""></p><h1 id="2-Mask-R-CNN"><a href="#2-Mask-R-CNN" class="headerlink" title="2. Mask R-CNN"></a>2. Mask R-CNN</h1><p>Mask R-CNN采样了 two-stage 过程，第一步是一个 RPN，第二步预测 bounding box 的类别和 box offset，同时对每个 RoI 输出一个<code>binary mask</code>。</p><h2 id="2-1-RoIAlign"><a href="#2-1-RoIAlign" class="headerlink" title="2.1 RoIAlign"></a>2.1 RoIAlign</h2><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200826175336.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLO V1,V2,V3</title>
    <link href="/2020/08/22/YOLO-V1-V2-V3/"/>
    <url>/2020/08/22/YOLO-V1-V2-V3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-YOLO-V1"><a href="#1-YOLO-V1" class="headerlink" title="1. YOLO V1"></a>1. YOLO V1</h1><h2 id="1-1-Introduction"><a href="#1-1-Introduction" class="headerlink" title="1.1 Introduction"></a>1.1 Introduction</h2><p>传统的目标检测模型，一般分为两个部分，即先进行区域提取，然后进行目标分类，但YOLO模型是一步到位，即同时产生多个bounding boxes和每个box的类别概率。YOLO有如下优点：</p><ul><li>YOLO非常快；</li><li>YOLO对图像整体进行分析；</li></ul><p>YOLO缺点：</p><ul><li>YOLO在准确度上落后当前目标检测系统；</li><li>容易产生定位错误；</li><li>网络中使用了全连接层，输入数据大小固定；</li><li>对小物体的检测效果不好。</li></ul><h2 id="1-2-Unified-Detection"><a href="#1-2-Unified-Detection" class="headerlink" title="1.2 Unified Detection"></a>1.2 Unified Detection</h2><p>YOLO将目标检测的各个部分整合成一个单一的神经网络。</p><p>YOLO将一幅图分成<code>S x S</code>个网格（也就是经过一系列卷积层之后feature map 的大小为<code>S x S</code>），如果某个object的中心落在这个网格中，则这个网格就负责预测这个object。<br>每个网格预测B个bounding boxes 和 confidence scores，<code>confidence</code>可以表示为：</p><script type="math/tex; mode=display">Pr(Object)*IOU_{pred}^{truth}</script><p>如果网格中不存在目标，则 confidence 为0。每个bounding box包含5个预测：x, y, w, h, confidence，其中<code>(x, y)</code>表示b<strong>相当于网格单元格边界的偏移</strong>，<code>(w, h)</code>是相对于整幅图像的宽度和高度。<br>每个网格还要预测C个条件类别概率（<strong>不管bounding boxes有多少个</strong>），其实C就是需要检测的类别数量，条件类别概率可以表示为$Pr(Class_i | Object)$。<br>最后输出的预测值可以编码成<code>S x S x (5B + C)</code>大小的tensor。YOLO运用在 PASCAL VOC数据集上时，参数设置如下, 即输出为<code>7 x 7 x 30</code>的tensor：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attr">S</span> = <span class="hljs-number">7</span><span class="hljs-attr">B</span> = <span class="hljs-number">2</span><span class="hljs-attr">C</span> = <span class="hljs-number">20</span></code></pre></div><p>下图为YOLO模型结构图。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200823203247.png" srcset="/img/loading.gif" alt=""></p><h3 id="1-2-1-Network-Design"><a href="#1-2-1-Network-Design" class="headerlink" title="1.2.1 Network Design"></a>1.2.1 Network Design</h3><p>网络使用24个卷积层，然后连接2个全连接层。具体网络结构如下：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200823224222.png" srcset="/img/loading.gif" alt=""></p><h3 id="1-2-2-Training"><a href="#1-2-2-Training" class="headerlink" title="1.2.2 Training"></a>1.2.2 Training</h3><p><code>(x, y, w, h)</code>都被归一化到0-1，激活函数使用leaky ReLU：</p><script type="math/tex; mode=display">f(x) = \left\{\begin{array}{1}x, if\ x > 0 \\0.1x,otherwise\end{array}\right.</script><p>损失函数如下：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200824170239.png" srcset="/img/loading.gif" alt=""></p><p>为了避免过拟合，使用了dropout 和数据增广。在第一个全连接使用dropout，设置比率为 0.5。</p><h1 id="2-YOLO-V2"><a href="#2-YOLO-V2" class="headerlink" title="2. YOLO V2"></a>2. YOLO V2</h1><h2 id="2-1-Introduction"><a href="#2-1-Introduction" class="headerlink" title="2.1 Introduction"></a>2.1 Introduction</h2><p>YOLO V2在YOLO的基础上进行改进，有着更准，更快，更强的优点。YOLO V2引入了anchor，使用K-Means的方法，去掉了全连接层。</p><h2 id="2-2-Better"><a href="#2-2-Better" class="headerlink" title="2.2 Better"></a>2.2 Better</h2><p>YOLO有许多定位错误，召回率也较低，所以YOLO V2主要集中于提高召回率和定位能力。下面是YOLO V2使用的一些技术：</p><h3 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a>Batch Normalization</h3><p>使用BN提高了收敛速度，并且帮助正则化模型，还可以去除模型的Dropout而不会产生过拟合。</p><h3 id="High-Resolution-Classifier"><a href="#High-Resolution-Classifier" class="headerlink" title="High Resolution Classifier"></a>High Resolution Classifier</h3><p>初始YOLO以224x224的输入分辨率训练分类网络，现在增加到<code>448 x 448</code>，为了适应新的分辨率，YOLO v2 的分类网络以 <code>448 x 448</code>的分辨率先在 ImageNet上进行微调。</p><h3 id="Convolutional-With-Anchor-Boxes"><a href="#Convolutional-With-Anchor-Boxes" class="headerlink" title="Convolutional With Anchor Boxes"></a>Convolutional With Anchor Boxes</h3><p>YOLO V1使用全连接层直接预测 bounding boxes 的坐标值，为 Faster R-CNN是预测anchor boxes 的偏移量和置信度。预测偏移量而不是直接预测坐标值能够简化问题。</p><p>所以作者移除全连接层并且使用 anchor boxes 来预测 bounding boxes。</p><p>收缩网络让其运行在<code>416 x 416</code>而不是<code>448 x 448</code>的输入数据上，因为YOLO下采样因子为32，使用<code>416 x 416</code>的图像，那么输出的feature map为<code>13 x 13</code>。</p><p>YOLO仅仅预测98个 boxes 但使用 anchor boxes 能够预测上千个 boxes。使用 anchor boxes 降低了精度，但增加了 recall（达到了88%）。</p><p>使用anchor boxes有以下两个问题：</p><ul><li>box的维度是手工挑选的；</li><li>模型不稳定。</li></ul><h3 id="Dimension-Clusters"><a href="#Dimension-Clusters" class="headerlink" title="Dimension Clusters"></a>Dimension Clusters</h3><p>Anchor boxes的维度一般是手工挑选的，在训练过程网络会修改框的宽高，最终得到准确的boxes。如果一开始能够选择更好的anchor boxes，那么网络学习更加容易。所以在训练集上运行k-means 算法，来获得更好的 boxes。任意一个 box 到聚类中心 centroid 的距离表示为：</p><script type="math/tex; mode=display">d(box, centriod) = 1 - IOU(box, centroid)</script><p>作者选择k=5，即选择5个聚类中心。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200824204429.png" srcset="/img/loading.gif" alt=""></p><h3 id="Direct-location-prediction"><a href="#Direct-location-prediction" class="headerlink" title="Direct location prediction"></a>Direct location prediction</h3><p>采用Faster R-CNN的方法预测偏移量，然后计算 predicted box 的坐标，会使模型不稳定，尤其在最开始的几次迭代。如下是 Faster R-CNN的计算方法：</p><script type="math/tex; mode=display">x = (t_x * w_a) + x_a\\y = (t_y * h_a) + y_a</script><p>例如，如果$t_x$ 等于 1 或者 -1 ，那么anchor box的移动距离就会很大，从而导致模型不稳定。</p><p>作者没有直接预测偏移量，而是根据网格单元的位置来预测坐标。</p><p>feature map中的每个网格预测5个bounding box，对于每个bounding box需要预测5个坐标值 $t_x, t_y, t_w, t_h, t_o$。</p><script type="math/tex; mode=display">Pr(object) * IOU(box, object) = \sigma(t_o)</script><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200824222128.png" srcset="/img/loading.gif" alt=""></p><h3 id="Fine-Grained-Features"><a href="#Fine-Grained-Features" class="headerlink" title="Fine-Grained Features"></a>Fine-Grained Features</h3><p>YOLO V2会获得一个<code>13 x 13</code>的 feature map，作者增加了一个<code>passthrough</code>层，将前面<code>26 x 26 x 512</code>的feature map转换成<code>13 x 13 x 1024</code> 的feature map 然后与当前的feature map执行concat操作。</p><h3 id="Multi-Scale-Training"><a href="#Multi-Scale-Training" class="headerlink" title="Multi-Scale Training"></a>Multi-Scale Training</h3><p>因为模型中去掉了全连接层，所以原则上可以使用任意尺度的输入数据。为了提高模型的鲁棒性，采用多尺度训练。因为模型下采样因子为32，所以不同的尺度也选择为32的倍数：{320， 352，….，608}。</p><h2 id="2-3-Faster"><a href="#2-3-Faster" class="headerlink" title="2.3 Faster"></a>2.3 Faster</h2><p>论文提出了Darknet-19，类似于VGG网络，大量使用<code>3 x 3</code>卷积。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200824234207.png" srcset="/img/loading.gif" alt=""></p><p><strong>Training for detection</strong>。需要修改分类网络来适应检测问题：移除最后的卷积层并使用3个<code>3 x 3</code>卷积层进行替换，每个卷积层有1024个<code>3 x 3</code>的卷积核，<code>3 x 3</code>卷积之后接一个<code>1 x 1</code>卷积，卷积核的数量为用于检测需要的输出数量，比如对于VOC需要预测5个boxes的5个坐标值和每个box的20个类别概率，则卷积核的数量为<code>5*5+5*20=125</code>。</p><h2 id="2-4-Stronger"><a href="#2-4-Stronger" class="headerlink" title="2.4 Stronger"></a>2.4 Stronger</h2><h1 id="3-YOLO-V3"><a href="#3-YOLO-V3" class="headerlink" title="3. YOLO V3"></a>3. YOLO V3</h1><p>YOVO v3 feature map中的每个方格预测3个预测框，每个预测框包含<code>(4 + 1 + 80)</code>个数据信息，即4个坐标，1个objectness score，80个类别概率，objectness score是用来判断预测框中是否包含目标。</p><h2 id="3-1-Bounding-Box-Prediction"><a href="#3-1-Bounding-Box-Prediction" class="headerlink" title="3.1 Bounding Box Prediction"></a>3.1 Bounding Box Prediction</h2><p>bounding box预测与YOLO v2一样，预测四个坐标。训练时采用<code>sum of squared</code>损失函数。</p><p>YOLOv3为每个bounding box 预测一个 objectness score，使用 logistic regression 进行预测。</p><h2 id="3-2-Class-Prediction"><a href="#3-2-Class-Prediction" class="headerlink" title="3.2 Class Prediction"></a>3.2 Class Prediction</h2><p>因为一个 bounding box 可能包含多个类别，所以没有使用 softmax 对类别进行预测，而是使用 logistic classifiers，即对每一个类别训练一个逻辑回归分类器。</p><h2 id="3-3-Prediction-Across-Scales"><a href="#3-3-Prediction-Across-Scales" class="headerlink" title="3.3 Prediction Across Scales"></a>3.3 Prediction Across Scales</h2><p>YOLOv3从不同尺度提取特征，最后提供3个不同尺度的feature map，分别为<code>13 x 13</code>、<code>26 x 26</code>、<code>52 x 52</code>。比如要得到<code>26 x 26</code>的feature map，需要将<code>13 x 13</code>的 feature map进行两倍上采样，然后与前面的<code>26 x 26</code>的feature map进行<code>concat</code>操作。不同尺度的feature map最后产生的输出大小为<code>N x N x [3*(4+1+80)]</code>，那么3个尺度最后的输出为<code>(10647, 85)</code>。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/v2-6467358da558bcb282b9204cf1e601cf_r.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="3-4-Feature-extractor"><a href="#3-4-Feature-extractor" class="headerlink" title="3.4 Feature extractor"></a>3.4 Feature extractor</h2><p>设计了Darknet-53网络，借鉴Resnet中特征融合的思想，运行效果与ResNet-152差不多，但速度是其两倍。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200825225006.png" srcset="/img/loading.gif" alt=""></p><h2 id="3-5-标注-anchor-box"><a href="#3-5-标注-anchor-box" class="headerlink" title="3.5 标注 anchor box"></a>3.5 标注 anchor box</h2><p>训练提供的数据集只是包含图片数据和ground truth的坐标数据，需要在原始数据基础上生成anchor box，然后进行相应标注，生成与网络输出格式一样的数据，再直接用到损失函数中。</p><h3 id="1-objectness-score"><a href="#1-objectness-score" class="headerlink" title="1. objectness score"></a>1. objectness score</h3><p>当锚框包含了物体时，objectness=1，表示预测框属于正类；当锚框不包含物体时，设置objectness=0，表示锚框属于负类；</p><h3 id="2-location"><a href="#2-location" class="headerlink" title="2. location"></a>2. location</h3><p>对于objectness为1的anchor box生成位置信息$(t_x^<em>, t_y^</em>, t_w^<em>, t_h^</em>)$，但因为sigmoid的反函数不好求，$(t_x<em>, t_y^</em>)$使用的是$(dx^<em>, dy^</em>)$.</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200831103708.png" srcset="/img/loading.gif" alt=""></p><h3 id="3-class"><a href="#3-class" class="headerlink" title="3. class"></a>3. class</h3><p>类别采用one-hot编码，例如某个anchor box 的类别信息为<code>[0, 0, 0, 1, 0, 0, 0]</code>，1表示anchor box中的物体属于该类别。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 标注预测框的objectness</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_objectness_label</span><span class="hljs-params">(img, gt_boxes, gt_labels, iou_threshold = <span class="hljs-number">0.7</span>,                         anchors = [<span class="hljs-number">116</span>, <span class="hljs-number">90</span>, <span class="hljs-number">156</span>, <span class="hljs-number">198</span>, <span class="hljs-number">373</span>, <span class="hljs-number">326</span>],                         num_classes=<span class="hljs-number">7</span>, downsample=<span class="hljs-number">32</span>)</span>:</span>    <span class="hljs-string">"""    img 是输入的图像数据，形状是[N, C, H, W]    gt_boxes，真实框，维度是[N, 50, 4]，其中50是真实框数目的上限，当图片中真实框不足50个时，不足部分的坐标全为0              真实框坐标格式是xywh，这里使用相对值    gt_labels，真实框所属类别，维度是[N, 50]    iou_threshold，当预测框与真实框的iou大于iou_threshold时不将其看作是负样本    anchors，锚框可选的尺寸    anchor_masks，通过与anchors一起确定本层级的特征图应该选用多大尺寸的锚框    num_classes，类别数目    downsample，特征图相对于输入网络的图片尺寸变化的比例    """</span>    img_shape = img.shape    batchsize = img_shape[<span class="hljs-number">0</span>]    num_anchors = len(anchors) // <span class="hljs-number">2</span>    input_h = img_shape[<span class="hljs-number">2</span>]    input_w = img_shape[<span class="hljs-number">3</span>]    <span class="hljs-comment"># 将输入图片划分成num_rows x num_cols个小方块区域，每个小方块的边长是 downsample</span>    <span class="hljs-comment"># 计算一共有多少行小方块</span>    num_rows = input_h // downsample    <span class="hljs-comment"># 计算一共有多少列小方块</span>    num_cols = input_w // downsample    label_objectness = np.zeros([batchsize, num_anchors, num_rows, num_cols])    label_classification = np.zeros([batchsize, num_anchors, num_classes, num_rows, num_cols])    label_location = np.zeros([batchsize, num_anchors, <span class="hljs-number">4</span>, num_rows, num_cols])    scale_location = np.ones([batchsize, num_anchors, num_rows, num_cols])    <span class="hljs-comment"># 对batchsize进行循环，依次处理每张图片</span>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(batchsize):        <span class="hljs-comment"># 对图片上的真实框进行循环，依次找出跟真实框形状最匹配的锚框</span>        <span class="hljs-keyword">for</span> n_gt <span class="hljs-keyword">in</span> range(len(gt_boxes[n])):            gt = gt_boxes[n][n_gt]            gt_cls = gt_labels[n][n_gt]            gt_center_x = gt[<span class="hljs-number">0</span>]            gt_center_y = gt[<span class="hljs-number">1</span>]            gt_width = gt[<span class="hljs-number">2</span>]            gt_height = gt[<span class="hljs-number">3</span>]            <span class="hljs-keyword">if</span> (gt_height &lt; <span class="hljs-number">1e-3</span>) <span class="hljs-keyword">or</span> (gt_height &lt; <span class="hljs-number">1e-3</span>):                <span class="hljs-keyword">continue</span>            i = int(gt_center_y * num_rows)            j = int(gt_center_x * num_cols)            ious = []            <span class="hljs-keyword">for</span> ka <span class="hljs-keyword">in</span> range(num_anchors):                bbox1 = [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, float(gt_width), float(gt_height)]                anchor_w = anchors[ka * <span class="hljs-number">2</span>]                anchor_h = anchors[ka * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]                bbox2 = [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, anchor_w/float(input_w), anchor_h/float(input_h)]                <span class="hljs-comment"># 计算iou</span>                iou = box_iou_xywh(bbox1, bbox2)                ious.append(iou)            ious = np.array(ious)            inds = np.argsort(ious)            k = inds[<span class="hljs-number">-1</span>]            label_objectness[n, k, i, j] = <span class="hljs-number">1</span>            c = gt_cls            label_classification[n, k, c, i, j] = <span class="hljs-number">1.</span>            <span class="hljs-comment"># for those prediction bbox with objectness =1, set label of location</span>            dx_label = gt_center_x * num_cols - j            dy_label = gt_center_y * num_rows - i            dw_label = np.log(gt_width * input_w / anchors[k*<span class="hljs-number">2</span>])            dh_label = np.log(gt_height * input_h / anchors[k*<span class="hljs-number">2</span> + <span class="hljs-number">1</span>])            label_location[n, k, <span class="hljs-number">0</span>, i, j] = dx_label            label_location[n, k, <span class="hljs-number">1</span>, i, j] = dy_label            label_location[n, k, <span class="hljs-number">2</span>, i, j] = dw_label            label_location[n, k, <span class="hljs-number">3</span>, i, j] = dh_label            <span class="hljs-comment"># scale_location用来调节不同尺寸的锚框对损失函数的贡献，作为加权系数和位置损失函数相乘</span>            scale_location[n, k, i, j] = <span class="hljs-number">2.0</span> - gt_width * gt_height    <span class="hljs-comment"># 目前根据每张图片上所有出现过的gt box，都标注出了objectness为正的预测框，剩下的预测框则默认objectness为0</span>    <span class="hljs-comment"># 对于objectness为1的预测框，标出了他们所包含的物体类别，以及位置回归的目标</span>    <span class="hljs-keyword">return</span> label_objectness.astype(<span class="hljs-string">'float32'</span>), label_location.astype(<span class="hljs-string">'float32'</span>), label_classification.astype(<span class="hljs-string">'float32'</span>), \             scale_location.astype(<span class="hljs-string">'float32'</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Faster R-CNN论文笔记</title>
    <link href="/2020/08/19/Faster-R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/08/19/Faster-R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p>对于目标检测，获取候选框的位置成为发展的瓶颈，因为一般获取候选框的方法都比较耗时。<code>Selective Search</code>是其中最流行的一个方法，但在CPU上运行时，对于每张图片需要消耗2秒时间，这是不能用于实时处理的。论文中，提出了<code>Region Proposal Network</code>(RPN)网络，用来生成<code>region proposals</code>(候选区域)，RPN是一个全卷积网络。</p><h1 id="2-Faster-R-CNN"><a href="#2-Faster-R-CNN" class="headerlink" title="2. Faster R-CNN"></a>2. Faster R-CNN</h1><p>Faster R-CNN由两个模块组成：第一个模块是一个深层全卷积网络，用来生成候选区域；第二个模块是Faster R-CNN检测器。Faster R-CNN的网络结构如下：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200820211707.png" srcset="/img/loading.gif" alt=""></p><p>主要由四个部分组成：</p><ul><li>conv layers：卷积层，用来提取特征；</li><li>Region Proposal Network：生成候选区域；</li><li>RoI pooling：输入为RPN生成的各个候选框和卷积层生成的基本特征；</li><li>classifier：分类器，通过fully connect 和 softmax计算每个proposal的类别。</li></ul><h2 id="2-1-Region-Proposal-Networks"><a href="#2-1-Region-Proposal-Networks" class="headerlink" title="2.1 Region Proposal Networks"></a>2.1 Region Proposal Networks</h2><ul><li>RPN接受任意尺寸的输入并输出一系列候选框和<code>objectness score</code>（用来判断候选框是背景还是物体）；</li><li>RPN是一个全卷积神经网络；</li></ul><p>如下图是RPN的结构。首先将feature map输入到中间层，即一个<code>3 x 3</code>的卷积层，生成256维的feature map，该特征输入到<code>cls layer</code>(分类层)和<code>reg layer</code>(回归层)。对于图像上的每一个位置，都有256个特征，该特征在分类层生成<code>2k</code>个分数（2k个分数是因为：使用的是softmax回归，然后又有前景和背景两个分类），在回归层生成<code>4k</code>个偏移量（用于修正候选框），其中k指某一位置处anchors的数量。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200821164533.png" srcset="/img/loading.gif" alt=""></p><h3 id="2-1-1-Anchors"><a href="#2-1-1-Anchors" class="headerlink" title="2.1.1 Anchors"></a>2.1.1 Anchors</h3><p>在feature map的每个位置上，都设置k个候选框，这些候选框就叫做<code>anchor</code>。论文中默认使用3 scales 和 3 aspect ratios，将产生k=9个anchors。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200822111443.png" srcset="/img/loading.gif" alt=""></p><p>Anchors就是一些矩形框，可以如下表示，四个坐标为<code>[x1, y1, x2, y2]</code>，代表左上角和右下角两个坐标。<br><div class="hljs"><pre><code class="hljs undefined">[[ <span class="hljs-number">-84.</span>  <span class="hljs-number">-40.</span>   <span class="hljs-number">99.</span>   <span class="hljs-number">55.</span>] [<span class="hljs-number">-176.</span>  <span class="hljs-number">-88.</span>  <span class="hljs-number">191.</span>  <span class="hljs-number">103.</span>] [<span class="hljs-number">-360.</span> <span class="hljs-number">-184.</span>  <span class="hljs-number">375.</span>  <span class="hljs-number">199.</span>] [ <span class="hljs-number">-56.</span>  <span class="hljs-number">-56.</span>   <span class="hljs-number">71.</span>   <span class="hljs-number">71.</span>] [<span class="hljs-number">-120.</span> <span class="hljs-number">-120.</span>  <span class="hljs-number">135.</span>  <span class="hljs-number">135.</span>] [<span class="hljs-number">-248.</span> <span class="hljs-number">-248.</span>  <span class="hljs-number">263.</span>  <span class="hljs-number">263.</span>] [ <span class="hljs-number">-36.</span>  <span class="hljs-number">-80.</span>   <span class="hljs-number">51.</span>   <span class="hljs-number">95.</span>] [ <span class="hljs-number">-80.</span> <span class="hljs-number">-168.</span>   <span class="hljs-number">95.</span>  <span class="hljs-number">183.</span>] [<span class="hljs-number">-168.</span> <span class="hljs-number">-344.</span>  <span class="hljs-number">183.</span>  <span class="hljs-number">359.</span>]]</code></pre></div></p><h3 id="2-1-2-非极大值抑制（Non-Maximum-Suppression）"><a href="#2-1-2-非极大值抑制（Non-Maximum-Suppression）" class="headerlink" title="2.1.2 非极大值抑制（Non-Maximum Suppression）"></a>2.1.2 非极大值抑制（Non-Maximum Suppression）</h3><p>目标检测的过程中在同一目标的位置上会产生大量的候选框，这些候选框相互之间可能会有重叠，此时我们需要利用非极大值抑制找到最佳的目标边界框，消除冗余的边界框。</p><p>非极大值抑制的流程如下：</p><ul><li>根据置信度得分进行排序</li><li>选择置信度最高的边界框添加到最终输出列表中，将其从边界框列表中删除</li><li>计算所有边界框的面积</li><li>计算置信度最高的边界框与其它候选框的IoU。</li><li>删除IoU大于阈值的边界框</li><li>重复上述过程，直至边界框列表为空。</li></ul><h3 id="2-1-3-Loss-function"><a href="#2-1-3-Loss-function" class="headerlink" title="2.1.3 Loss function"></a>2.1.3 Loss function</h3><p>损失函数如下：</p><script type="math/tex; mode=display">\begin{array}{c}L\left(\left\{p_{i}\right\},\left\{t_{i}\right\}\right)=\frac{1}{N_{c l s}} \sum_{i} L_{c l s}\left(p_{i}, p_{i}^{*}\right) \\+\lambda \frac{1}{N_{r e g}} \sum_{i} p_{i}^{*} L_{r e g}\left(t_{i}, t_{i}^{*}\right)\end{array}</script><p>$p_i^<em>$ 是 ground-truth label，如果anchor box是正样本，则为1，反之为0。$L_{cls}$是两个类别（目标和非目标）的 log loss 函数；$L_{reg}(t_i, t^</em>_i) = R(t_i-t_i^*)$，其中R()函数是<code>smooth L1</code>损失函数：</p><script type="math/tex; mode=display">smooth_{L_1}(x) = \left\{\begin{array}{1}0.5x^2, if\  |x| < 1 \\|x|-0.5, otherwise\end{array}\right.</script><p>$t_i$ 是关于anchor box坐标偏移量的预测值，即 $t_i$ 都是 reg layer 生成的数据。</p><script type="math/tex; mode=display">\begin{aligned}t_{\mathrm{x}} &=\left(x-x_{\mathrm{a}}\right) / w_{\mathrm{a}}, \quad t_{\mathrm{y}}=\left(y-y_{\mathrm{a}}\right) / h_{\mathrm{a}} \\t_{\mathrm{w}} &=\log \left(w / w_{\mathrm{a}}\right), \quad t_{\mathrm{h}}=\log \left(h / h_{\mathrm{a}}\right) \\t_{\mathrm{x}}^{*} &=\left(x^{*}-x_{\mathrm{a}}\right) / w_{\mathrm{a}}, \quad t_{\mathrm{y}}^{*}=\left(y^{*}-y_{\mathrm{a}}\right) / h_{\mathrm{a}} \\t_{\mathrm{w}}^{*} &=\log \left(w^{*} / w_{\mathrm{a}}\right), \quad t_{\mathrm{h}}^{*}=\log \left(h^{*} / h_{\mathrm{a}}\right)\end{aligned}</script><p>其中$x,x_a,x^*$ 分别表示 predicted box，anchor box 和 ground-truth box 的坐标值。</p><h2 id="2-2-RoI-pooling"><a href="#2-2-RoI-pooling" class="headerlink" title="2.2 RoI pooling"></a>2.2 RoI pooling</h2><p>RoI pooling层的输入是RPN网络生成的一系列候选框和conv layer 生成的feature map，然后将每个feature map划分为<code>7 x 7</code>的子窗口，再然后对每个子窗口使用max pool，那么最后的输出大小为<code>7 x 7</code>。使用 RoI pooling能够固定输出的大小，从而能够处理多尺度的候选框。</p><h2 id="2-3-Sharing-Features-for-RPN-and-Fast-R-CNN"><a href="#2-3-Sharing-Features-for-RPN-and-Fast-R-CNN" class="headerlink" title="2.3 Sharing Features for RPN and Fast R-CNN"></a>2.3 Sharing Features for RPN and Fast R-CNN</h2><p>论文中采用<code>4-Step Alternating Training</code>方法来训练RPN和Fast R-CNN，前两步没有共享卷积层。</p><ol><li>训练RPN；</li><li>使用第一步训练的RPN产生的候选框来训练Fast R-CNN；</li><li>固定共享的卷积层，对RPN网络进行微调；</li><li>固定共享的卷积层，对Fast R-CNN进行微调。</li></ol>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FCN论文笔记</title>
    <link href="/2020/08/19/FCN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/08/19/FCN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、Introduction"><a href="#1、Introduction" class="headerlink" title="1、Introduction"></a>1、Introduction</h1><p>论文地址：<a href="https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf" target="_blank" rel="noopener">Fully Convolutional Networks for Semantic Segmentation</a></p><p>FCN使用全卷积神经网络用于语义分割，网络能够接受任意大小的输入数据，并产生相应大小的输出结果。FCN是对图像进行像素级的分类，即对图像中的每个像素点进行分类。FCN定义了一个创新的<code>skip architecture</code>，该结构将深层的粗糙的语义信息与浅层的细微的信息进行特征融合。</p><ul><li>全卷积神经网络，可以接受任意大小的输入；</li><li>最后输出使用上采样的方法，从而对图像每个像素点进行分类；</li><li>skip architecture进行特征融合。</li></ul><h1 id="2-Fully-convolutional-networks"><a href="#2-Fully-convolutional-networks" class="headerlink" title="2. Fully convolutional networks"></a>2. Fully convolutional networks</h1><h2 id="2-1-Adapting-classifiers-for-dense-prediction"><a href="#2-1-Adapting-classifiers-for-dense-prediction" class="headerlink" title="2.1 Adapting classifiers for dense prediction"></a>2.1 Adapting classifiers for dense prediction</h2><p>普通的神经网络采用固定大小的输入并产生固定大小的输出，因为这些神经网络在最后都使用了全连接层。所以可以将全连接层转换成全卷积层，从而可以使用任意大小的输入。</p><blockquote><p>为什么全连接层需要使用固定大小的输入？</p><p>因为全连接层的神经元数量是固定的，参数数量也是固定的，比如某一全连接层神经元数量为1000，输入数据的维度为4096，则参数的规模为<code>1000 x 4096</code>，则对于一个样本而言其大小只能为<code>4096 x 1</code>, 而卷积运算使用的是滑动窗口的方式，其输入大小不需要固定。</p></blockquote><p>将全连接层转换成全卷积层之后，再添加一个上采样层，使输出与输入大小一样，从而实现对每个像素点的预测。</p><h2 id="2-2-Upsampling-is-backwards-strided-convolution"><a href="#2-2-Upsampling-is-backwards-strided-convolution" class="headerlink" title="2.2 Upsampling is backwards strided convolution"></a>2.2 Upsampling is backwards strided convolution</h2><p>为了实现<code>dense prediction</code>，使用上采样将输出结果的大小变换成输入大小，上采样主要有插值法和反卷积（deconvolution）两种方式, 其实反卷积更加合适的叫法是<code>transposed convolution</code>(转置卷积)。</p><h3 id="2-2-1-反卷积（转置卷积）"><a href="#2-2-1-反卷积（转置卷积）" class="headerlink" title="2.2.1 反卷积（转置卷积）"></a>2.2.1 反卷积（转置卷积）</h3><p>如下是卷积的运算过程，数据大小为<code>4 x 4</code>, 卷积核大小为<code>3 x 3</code>，输出大小为<code>2 x 2</code></p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/479ce3311c7f4d12be27353ab7087f7e.gif" srcset="/img/loading.gif" alt=""></p><p>将卷积核展开成如下系数矩阵C，将输入数据展开成<code>16 x 1</code>的矩阵X，则输出Y可以表示为$Y = CX$。那么X可以表示为$X = C^TY$，所以反卷积将卷积核的转置矩阵与输入进行相乘。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200820164326.png" srcset="/img/loading.gif" alt=""></p><h1 id="3-Segmentation-Architecture"><a href="#3-Segmentation-Architecture" class="headerlink" title="3. Segmentation Architecture"></a>3. Segmentation Architecture</h1><h2 id="3-1-Combining-what-and-where"><a href="#3-1-Combining-what-and-where" class="headerlink" title="3.1 Combining what and where"></a>3.1 Combining what and where</h2><p>使用<code>skip architecture</code>, 将低层的特征与最后的特征进行特征融合，如下图所示，最后就有三种不同类型的网络，分别为<code>FCN32s</code>、<code>FCN16</code>s、<code>FCN8s</code>。</p><ul><li>FCN32s：直接将pool5的特征进行32倍上采用得到最终结果；</li><li>FCN16s：将pool4的特征与pool5进行2倍上采用的数据进行特征融合，然后进行16倍上采样。</li></ul><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200820154634.png" srcset="/img/loading.gif" alt=""></p><p>下面是三种网络的结果对比，可见8倍上采样的结果最好，因为其融入了更多细微的特征。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200820170828.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
      <tag>语义分割</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fast R-CNN论文笔记</title>
    <link href="/2020/07/25/Fast-R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/25/Fast-R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><h2 id="1-1-R-CNN-and-SPPnet"><a href="#1-1-R-CNN-and-SPPnet" class="headerlink" title="1.1 R-CNN and SPPnet"></a>1.1 R-CNN and SPPnet</h2><p>R-CNN有如下几个缺点：</p><ul><li>训练要经过多个步骤。首先需要训练一个CNN用来提取特征，然后根据提取的特征训练多个SVM分类器，最后训练bounding-box回归器来优化bounding-box的位置。</li><li>训练非常消耗空间和时间。为了训练SVM分类器和bounding-box回归器，需要将提取的特征保存到磁盘中，这将占用较大存储资源，同时读取这些数据时，也要消耗一定时间。</li><li>目标检测非常缓慢。测试时，需要在每个候选框中提取特征，即对每个候选框进行卷积运算，这将带来大量的重复运算。</li></ul><p>SPPnet通过共享计算的方式提高速度。SPPnet对整个图片进行计算从而获得feature map，然后从该feature map中提取某个候选区域的特征。</p><h2 id="1-2-Contributions"><a href="#1-2-Contributions" class="headerlink" title="1.2 Contributions"></a>1.2 Contributions</h2><p>为了解决R-CNN和SPPnet中的缺点，论文中提出了<code>Fast R-CNN</code>, Fast R-CNN有如下优点：</p><ul><li>更高的mAP；</li><li>训练是单步骤的；</li><li>训练能更新所有网络层；</li><li>不需要缓存特征。</li></ul><h1 id="2-Fast-R-CNN-architecture"><a href="#2-Fast-R-CNN-architecture" class="headerlink" title="2. Fast R-CNN architecture"></a>2. Fast R-CNN architecture</h1><p>Fast R-CNN的整体结构如下图所示：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200725114510.png" srcset="/img/loading.gif" alt=""></p><p>网络将整幅图片和一系列<strong>候选区域</strong>作为输入（所以需要预先获取候选区域），首先经过几个卷积层和最大池化层得到feature map，然后对于每个候选区域在整个feature map中都有一个对应的区域，经过<code>RoI pooling layer</code>之后获得一个对应的固定长度的特征向量。然后将每个特征向量输入到全连接层，最后分支成两个输出层：一个softmax用于判断候选区域的类别，一个bbox regressor用于改善边界框的位置。</p><h2 id="2-1-The-RoI-pooling-layer"><a href="#2-1-The-RoI-pooling-layer" class="headerlink" title="2.1 The RoI pooling layer"></a>2.1 The RoI pooling layer</h2><p>RoI(region of interest)：感兴趣区域，也就是原始图像中的候选区域，经过Conv之后，感兴趣区域也要映射到feature map中的对应位置。论文中，RoI是feature map中的一个长方形窗口。</p><p>对于不同的候选区域，它们的大小都不一样，在R-CNN中会使用一些变形操作将其转换到需要的尺寸，但使用变形之后，会造成部分特征损失。Fast R-CNN使用<code>spatial pyramid pooling layer</code>（空间金字塔池化）,对于任意尺寸的RoI，都会产生固定大小为<code>H x W</code>的特征向量(论文中采用7x7的大小)。</p><p>RoI定义为四元组<code>(r, c, h, w)</code>，其中<code>(r, c)</code>表示左上角的位置，<code>(h, w)</code>表示窗口的高度和宽度。在进行RoI max pooling时，先将RoI划分为<code>H x W</code>个大小为<code>h/H x w/W</code>的子窗口，然后对子窗口使用最大池化操作，那么最后输出大小为<code>H x W</code>。</p><h2 id="2-2-Initializing-from-pre-trained-networks"><a href="#2-2-Initializing-from-pre-trained-networks" class="headerlink" title="2.2 Initializing from pre-trained networks"></a>2.2 Initializing from pre-trained networks</h2><p>先使用ImageNet数据集对CNN网络进行预训练（论文中使用的VGG），然后用预训练的网络来初始化Fast R-CNN，初始化前需要进行3项转换。</p><ul><li>最后一个的最大池化层用RoI pooling layer替换；</li><li>输出层使用softmax和bounding-box regressors替换；</li><li>将图片数据和对应的RoI作为输入。</li></ul><h2 id="2-3-Fine-tuning"><a href="#2-3-Fine-tuning" class="headerlink" title="2.3 Fine-tuning"></a>2.3 Fine-tuning</h2><p>微调主要是用来优化softmax分类器和bounding-box回归器。</p><h3 id="1-Multi-task-loss"><a href="#1-Multi-task-loss" class="headerlink" title="1. Multi-task loss"></a>1. Multi-task loss</h3><p>优化过程的损失函数使用多任务损失。</p><script type="math/tex; mode=display">L(p, u, t^u, v) = L_{cls}(p, u) + \lambda[u \ge 1] L_{loc}(t^u, v)</script><p>其中u表示真实类别，v 表示bounding-box的真实位置，那么对于类别u其bounding-box的位置 $v = (v_x, v_y, v_w, v_h)$；p表示预测类别的概率，$t_u$为预测的位置, 并且$t_u=(t^u_x, t^u_y, t^u_w, t^u_h)$。</p><p>$[u \ge 1]$等于0时，即物体的类别为背景，背景没有边界框。</p><script type="math/tex; mode=display">[u \ge 1] = \left \{ \begin{array}{}1, u \ge 1 \\0, otherwise\end{array}\right.</script><p>其中$L_{cls}$是softmax分类器的损失值：</p><script type="math/tex; mode=display">L_{cls}(p, u) = -\log(p_u)</script><p>$L_{loc}$是bounding-box回归器的损失值：</p><script type="math/tex; mode=display">L_{loc}(t^u, v) = \sum_{i \in \{x, y, w, h\}}smooth_{L_1}(t^u_i-v_i)</script><p>其中</p><script type="math/tex; mode=display">smooth_{L_1}(x) = \left \{\begin{array}{}0.5x^2, |x| \lt 1 \\|x| - 0.5, otherwise\end{array}\right.</script><h2 id="3-Fast-R-CNN-detection"><a href="#3-Fast-R-CNN-detection" class="headerlink" title="3. Fast R-CNN detection"></a>3. Fast R-CNN detection</h2><h2 id="3-1-SVD"><a href="#3-1-SVD" class="headerlink" title="3.1 SVD"></a>3.1 SVD</h2><p>网络中的全连接层参数非常多，导致计算缓慢，可以使用奇异值分解（SVD）的方法加速计算。假设权重W的大小为<code>u x v</code>,使用SVD：</p><script type="math/tex; mode=display">W \approx U \Sigma_tV^T</script><p>其中U是<code>u x t</code>的矩阵，$\Sigma_t$大小为<code>t x t</code>， $V^T$大小为<code>t x v</code>。</p><p>然后将一个全连接层转换成两个全连接层，第一个全连接层权重矩阵为$\Sigma_t V^T$，第二个全连接层的权重矩阵为 U。那么参数数量由<code>u x v</code>变成了<code>t(u + v)</code>，只要 t 远小于 u 和 v，参数数量就会大大减少。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>R-CNN论文笔记</title>
    <link href="/2020/07/22/R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/22/R-CNN%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p>R-CNN主要是用于目标检测，目标检测包括两个方面：localization和recognition，即定位目标位置和识别目标。R-CNN在VOC2012数据集上mAP（mean average precision）达到了53.3%。</p><p>在面临数据比较少的问题时，首先对CNN进行预训练然后进行微调以优化网络。</p><p>R-CNN用于目标检测时需要经过多个步骤：首先输入图像，然后在原始图像上提取出候选区域，然后将候选区域输入到CNN中提取特征，最后将提取的特征输入到分类器中判断目标类别。其中R-CNN的整体架构如下图所示。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200723103516.png" srcset="/img/loading.gif" alt=""></p><h1 id="2-Object-detection-with-R-CNN"><a href="#2-Object-detection-with-R-CNN" class="headerlink" title="2. Object detection with R-CNN"></a>2. Object detection with R-CNN</h1><p>R-CNN主要包括三个模块：</p><ol><li>第一个模块用于生成与类别无关的候选区域；</li><li>第二个模块是用于提取特征的大型卷积神经网络；</li><li>第三个模块是多个SVM分类器，使用多个分类器是因为每个类别对应一个分类器；</li></ol><p><strong>Region proposals</strong>：在图像中提取候选区域，论文中采用<code>selective search</code>的方法，大约提取2000个区域。</p><p><strong>Feature extraction</strong>：使用AlexNet网络（5个卷积层和2个全连接层，最后的输出层没有使用）提取一个4096维的特征，网络的输入是<code>227 x 227</code>的RGB图像。为了使候选区域与CNN的输入数据兼容，需要对候选区域进行转换。转换时，先将候选的边界框扩大p个像素点（论文中使用p=16）,然后将其转换到指定尺寸。</p><p><strong>Supervised pre-training</strong>：在辅助数据集（ILSVRC 2012）上训练CNN网络。主要是为了解决用于目标检测的数据比较少的问题。</p><p><strong>fine-tuning</strong>：将最后输出层的1000个神经元替换成<code>N + 1</code>个神经元，N表示目标的类别数，+1是因为多了一个类别：背景。然后使用候选区域对CNN进行训练。</p><p><strong>Object category classifiers</strong>：对每个类别训练一个SVM分类器，这些分类器将CNN产生的f7特征（即第二个全连接层）作为输入。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mAP(mean average precision)</title>
    <link href="/2020/07/22/mAP-mean-average-precision/"/>
    <url>/2020/07/22/mAP-mean-average-precision/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><p>mAP是用于目标检测的一项比较流行的评价指标。下面介绍一些比较重要的定义。</p><h2 id="IoU-Intersection-over-Union"><a href="#IoU-Intersection-over-Union" class="headerlink" title="IoU(Intersection over Union)"></a>IoU(Intersection over Union)</h2><p>IoU：交并比，用于评估两个边界之间的重叠比例。记<code>ground truth</code>边界框为$B_{gt}$, 预测的边界框为$B_p$, 则IoU计算的是ground truth边界框与预测边界框相交的面积占两者相并的面积的比例，</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200722230951.png" srcset="/img/loading.gif" alt=""></p><p>那么IoU的计算公式为：</p><script type="math/tex; mode=display">IoU = \frac{B_{gt} \cap B_p }{B_{gt} \cup B_{p}}</script><h2 id="TP-TN-FP-FN"><a href="#TP-TN-FP-FN" class="headerlink" title="TP, TN, FP, FN"></a>TP, TN, FP, FN</h2><ul><li>TP: True Positive, 正确划分为正例的个数，A correct detection. Detection with IOU ≥ <em>threshold</em>；</li><li>TN: True Nagative, 正确划分为负例的个数；</li><li>FP: False Positive, 错误划分为正例的个数，A wrong detection. Detection with IOU &lt; <em>threshold</em>；</li><li>FN: False Negative, 错误划分为负例的个数，A ground truth not detected。</li></ul><p>其中<code>threshold</code>一般取 $[0.5, 0.75, 0.95]$</p><h2 id="Precision-amp-Recall"><a href="#Precision-amp-Recall" class="headerlink" title="Precision &amp; Recall"></a>Precision &amp; Recall</h2><p><strong>precision</strong>：</p><script type="math/tex; mode=display">precision = \frac{TP}{TP + FP} = \frac{TP}{all\ detections}</script><p><strong>recall</strong>：</p><script type="math/tex; mode=display">racall = \frac{TP}{TP + FN} = \frac{TP}{all\ ground\ truths}</script><p>下图也可以说明precision和recall的计算：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200722225059.png" srcset="/img/loading.gif" alt=""></p><h1 id="2-计算"><a href="#2-计算" class="headerlink" title="2. 计算"></a>2. 计算</h1><h2 id="2-1-precision和recall的计算"><a href="#2-1-precision和recall的计算" class="headerlink" title="2.1 precision和recall的计算"></a>2.1 precision和recall的计算</h2><p>首先获取了多个样本置信度，按照置信度递减的顺序排序，然后分别计算其precision和recall，计算时，注意对TP等值进行累加。</p><h2 id="2-2-AP的计算"><a href="#2-2-AP的计算" class="headerlink" title="2.2 AP的计算"></a>2.2 AP的计算</h2><p>通常AP（average precision）的定义为<code>precision-recall</code>曲线的面积。</p><p>首先绘制precision-recall曲线，然后对其平滑变成<code>zigzag pattern</code>。</p><h3 id="1-11-point-interpolation"><a href="#1-11-point-interpolation" class="headerlink" title="1. 11-point interpolation"></a>1. 11-point interpolation</h3><p>在曲线上取$[0, 0.1, 0.2, \ldots, 1.0]$这11个点，然后对其求平均值。</p><h3 id="2-Interpolating-all-points"><a href="#2-Interpolating-all-points" class="headerlink" title="2. Interpolating all points"></a>2. Interpolating all points</h3><p>其实就是求曲线在recall轴上的面积。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><p><a href="https://github.com/rafaelpadilla/Object-Detection-Metrics#precision-x-recall-curve" target="_blank" rel="noopener">https://github.com/rafaelpadilla/Object-Detection-Metrics#precision-x-recall-curve</a></p></li><li><p><a href="https://medium.com/@jonathan_hui/map-mean-average-precision-for-object-detection-45c121a31173" target="_blank" rel="noopener">https://medium.com/@jonathan_hui/map-mean-average-precision-for-object-detection-45c121a31173</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机视觉</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DenseNet论文笔记</title>
    <link href="/2020/07/21/DenseNet%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/21/DenseNet%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>论文地址：<a href="https://arxiv.org/abs/1608.06993" target="_blank" rel="noopener">Densely Connected Convolutional Networks</a></p><p>论文中提出了Dense Convolutional Network(DenseNet), 传统的L层神经网络有L个连接，但DenseNet有$\frac{L(L + 1)}{2}$个连接。DenseNet中对于每一层而言，前面所有层的feature map作为该层的输入，该层输出的feature map又作为后面所有层的输入。DenseNet与ResNet的一个不同是：特征融合时，ResNet使用像素相加，而DenseNet使用的是concat操作。DenseNet有许多引人注目的优点：</p><ul><li>减轻梯度消失问题；</li><li>加强特征传递；</li><li>促进特征的复用；</li><li>大大地减少参数的数量，因此需要更少的计算。</li><li>有一定的正则化效果，减轻了过拟合。</li></ul><p>下图所示是一个dense block：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200721121532.png" srcset="/img/loading.gif" alt=""></p><h1 id="2-DenseNet"><a href="#2-DenseNet" class="headerlink" title="2. DenseNet"></a>2. DenseNet</h1><p>DenseNet中的每一层使用一个非线性转换$H_l(·)$，其中$l$表示第$l$层，$H_l(·)$由一系列操作组成：BN，ReLU，Pooling，或者Convolution。那么第$l$层将完成如下操作：</p><script type="math/tex; mode=display">x_l = H_l([x_0, x_1, \ldots, x_{l - 1}])</script><p>其中$[x_0, x_1, \ldots, x_{l - 1}]$表示$0, 1, \ldots,l-1$层的feature map执行concat操作之后的结果。其中$H_l(·)$函数包含以下三个连续的操作：BN，然后ReLU，然后是<code>3 x 3</code>Convolution。</p><p><strong>池化层</strong>。当feature map的尺寸改变时，就无法使用concat操作，但是使用下采样改变feature map的尺寸是必要的。因此为了使用下采用，将网络划分为多个dense block，每个block中使用dense connect。在两个block之间引入一个<code>transition layer</code>，该层包含三个操作：BN，<code>1 x 1</code>卷积，<code>2 x 2</code>平均池化。</p><p><strong>Growth rate</strong>。假设每个$H_l(·)$函数产生<code>k</code>个feature map（<strong>feature map的数量也就是通道数</strong>），那么第$l$层的输入有$k_0 + k (l - 1)$个feature map，其中$k_0$指最开始的输入的通道数。参数<code>k</code>就是growth rate。</p><p><strong>Bottleneck layers</strong>。在<code>3 x 3</code>卷积层之前引入<code>1 x 1</code>卷积来减少feature map的数量，那么$H_l(·)$函数将完成如下操作<code>BN-ReLU-Conv(1x1)-BN-ReLU-Conv(3x3)</code>, 然后将该网络称为<code>DenseNet-B</code>.实验中，<code>1 x 1</code>卷积产生<code>4k</code>个feature map。</p><p><strong>Compression</strong>。在<code>transition layer</code>减少feature map的数量。假设一个dense block有m个feature map，接下来的<code>transition layer</code>产生$\theta m$个输出feature map，其中$0&lt;\theta&lt;1$，该种网络称为<code>DenseNet-C</code>。实验中，将$\theta$设置为0.5。</p><p><strong>实现细节</strong>。所有的<code>3 x 3</code>卷积padding=1，以保证feature map尺寸不变。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Residual Net论文笔记</title>
    <link href="/2020/07/18/Residual-Net%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/18/Residual-Net%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p>论文地址：<a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a></p><p>深层神经网络在图像分类方面带来了一系列突破，有许多证据表明网络的深度是非常重要的。但是不断增加网络深度会带来许多问题。</p><ul><li><p>梯度消失和梯度爆炸问题。这个问题可以通过使用<code>Batch Normalization</code>来解决。</p></li><li><p><code>degradation problem</code>（退化问题）：随着网络深度增加，精确度饱和，然后快速下降。也就是添加更多层到一个合适的网络中，会导致产生更高的<code>training error</code>，如下图所示：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200719104137.png" srcset="/img/loading.gif" alt=""></p></li></ul><p>论文中，为了解决退化问题，提出了<code>residual learning framework</code>.</p><p>这种方法，主要有两个优点：</p><ul><li>深层残差网络更容易优化；</li><li>增加深度后能够提高精确度。</li></ul><p>最后设计了一个达到152层的残差网络，在ImageNet数据集上只有3.57%的错误率，并在2015年ILSVRC图像分类比赛中获得了第一名。</p><h1 id="2-残差块"><a href="#2-残差块" class="headerlink" title="2. 残差块"></a>2. 残差块</h1><p>如下图，是一个残差块的基本结构。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200719105203.png" srcset="/img/loading.gif" alt=""><br>使用<code>shortcut connection</code>来完成残差块的计算，输入为x, 则输出为：</p><script type="math/tex; mode=display">y = F(x, W_i) + x \tag{1}</script><p>在上图两层的残差块中，$F(x, W_i)$ 可以表示为 $W_2 \sigma(W_1x)$，其中$\sigma$ 是<code>ReLU</code>激活函数。运算<code>F + x</code>通过<code>shortcut connection</code>完成<code>element-wise addition</code>操作（<strong>对应元素相加</strong>），执行该运算时，<code>F</code>和<code>x</code>的维度需要一致，如果不一致，有以下两种解决办法：</p><ul><li><code>identity mapping</code>: 填充0来增加数据维度，该方式不会增加额外的参数；</li><li><code>projection shortcut</code>: 使用该公式来进行计算：$y = F(x, W_i) + W_sx$，即增加了额外的参数$W_s$。一般是使用<code>1 x 1</code>卷积来修改x的维度。</li></ul><h1 id="3-网络架构"><a href="#3-网络架构" class="headerlink" title="3. 网络架构"></a>3. 网络架构</h1><p>设计了plain nets 和 residual nets 两种模型，进行对比。</p><h2 id="3-1-Plain-Network"><a href="#3-1-Plain-Network" class="headerlink" title="3.1 Plain Network"></a>3.1 Plain Network</h2><p>卷积层大部分使用<code>3 x 3</code>卷积，主要有以下设计规则：</p><ul><li>输入和输出尺寸相同时，卷积核的数量与上一层相同；</li><li>feature map尺寸减半时，卷积核的数量加倍。下采样是直接使用stride = 2的卷积。</li></ul><h2 id="3-2-Residual-Network"><a href="#3-2-Residual-Network" class="headerlink" title="3.2 Residual Network"></a>3.2 Residual Network</h2><p>与Plain Network基本相同，只是网络中使用了<code>shortcut connection</code>，将网络变成了残差网络。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200719114200.png" srcset="/img/loading.gif" alt=""></p><h1 id="4-实现"><a href="#4-实现" class="headerlink" title="4. 实现"></a>4. 实现</h1><p>网络中在每个卷积层之后使用<code>Batch Normalization</code>，然后使用<code>ReLU</code>激活函数，即计算顺序为<code>Conv-BN-ReLU</code>。在进行<code>shortcut connection</code>时，如果维度不相同，需要增加维度，以保证维度匹配，能够执行<code>element-wise addition</code>操作。</p><p>数据增广时，先将图像缩放，缩放尺寸为$[256, 480]$，然后执行均值减法，然后对缩放图片或水平翻转的图片进行224x224的剪裁。</p><p>训练时，使用小批量梯度下降法，mini-batch size为256，学习率为0.1，当学习率不变时对其除以10，weight_decay = 0.0001, momentum = 0.9, 没有使用Dropout正则化。</p><p>测试时，对测试数据进行<code>10-crop</code>操作，并将全连接层转换为卷积层，最后对多尺度score map 取平均值。</p><h1 id="5-实验"><a href="#5-实验" class="headerlink" title="5. 实验"></a>5. 实验</h1><h2 id="5-1-Identity-vs-Projection-Shortcuts"><a href="#5-1-Identity-vs-Projection-Shortcuts" class="headerlink" title="5.1 Identity vs. Projection Shortcuts"></a>5.1 Identity vs. Projection Shortcuts</h2><p>根据<code>shortcut</code>的不同方式，设计了三种不同类型的网络：</p><ul><li>A: 使用零填充的方式增加维度；</li><li>B: 使用<code>peojection shortcut</code>的方式增加维度，维度相同的则使用<code>identity shortcut</code>;</li><li>C: 全部使用<code>projection shortcut</code>.</li></ul><p>Identity shortcuts 对下面的瓶颈结构非常重要。</p><h2 id="5-2-Deeper-Bottleneck-Architecture"><a href="#5-2-Deeper-Bottleneck-Architecture" class="headerlink" title="5.2 Deeper Bottleneck Architecture"></a>5.2 Deeper Bottleneck Architecture</h2><p>瓶颈结构如下右图所示，使用<code>1 x 1</code>、<code>3 x 3</code>、<code>1 x 1</code>三个卷积层，第一个<code>1 x 1</code>卷积用于减少维度，第二个<code>1 x 1</code>卷积用于增加维度。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200718220612.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoogLeNet论文笔记</title>
    <link href="/2020/07/16/GoogLeNet%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/16/GoogLeNet%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p>论文地址：<a href="https://research.google.com/pubs/pub43022.html" target="_blank" rel="noopener">Going Deeper with Convolutions</a></p><p>论文打破常规，设计了一种将<code>1 x 1</code>卷积、<code>3 x 3</code>卷积、<code>5 x 5</code>卷积并联组合在一起，然后将输出结果进行<code>concatenate</code>(拼接)操作的结构，该结构叫做<code>Inception</code>，Inception主要特点是改善了对计算资源的利用。论文后面利用<code>Inception</code>设计了一个有<code>22</code>层的深层神经网络——<code>GoogLeNet</code>，该网络主要用于图像分类和目标检测，网络参数比AlexNet的参数少12倍，并且在2014年的ILSVRC比赛中获得了第一名。</p><h1 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2. Related Work"></a>2. Related Work</h1><ol><li>GoogLeNet中多次使用Inception结构；</li><li>GoogLeNet中大量使用<code>1 x 1</code>卷积，主要有两个作用：<ul><li>主要用于降维以解决计算瓶颈的问题；</li><li>增加网络的深度和宽度而不用使用惩罚项，网络的<strong>宽度</strong>是指每层的单元数，也就是卷积核的数量。</li></ul></li><li>目标检测当前技术主要是R-CNN，R-CNN可以分解成两个子问题：<ul><li>利用底层的颜色和纹理等特性初步获取物体的位置；</li><li>使用分类器判断该位置处的物体类别。</li></ul></li></ol><h1 id="3-MOtivation-and-High-Level-Consideration"><a href="#3-MOtivation-and-High-Level-Consideration" class="headerlink" title="3. MOtivation and High Level Consideration"></a>3. MOtivation and High Level Consideration</h1><p>增加网络的深度和宽度是提高性能的最直接的方法，但有两个主要的缺点：</p><ul><li>增加网络的尺寸意味着参数数量更多，导致网络更容易过拟合，特别是训练的数据集数量有限的时候。</li><li>增加计算资源。</li></ul><p>解决上述问题的基本方法是：将全连接换成稀疏连接（卷积就是一种稀疏连接）。传统网络通常使用随机稀疏连接，但AlexNet对全连接的使用，又改变了这一趋势。通常全连接是为了更好的进行并行计算，而稀疏连接是为了打破对称来改善学习。</p><h1 id="5-Inception"><a href="#5-Inception" class="headerlink" title="5. Inception"></a>5. Inception</h1><p>Inception的主要思想是：<strong>如何使用密集成分近似最优局部稀疏结构。</strong></p><h2 id="5-1-naive-version"><a href="#5-1-naive-version" class="headerlink" title="5.1 naive version"></a>5.1 naive version</h2><p>论文中Inception的初始版本如下：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200716214820.png" srcset="/img/loading.gif" alt=""></p><ul><li>使用<code>1 x 1</code>、<code>3 x 3</code>、<code>5 x 5</code>的卷积是为了方便输出结果的对齐；</li><li>最后的输出是将卷积、max pool结果进行concat操作（<strong>注意不是逐像素相加</strong>）；</li><li>使用一个并行的池化路径有额外的好处；</li><li>随着网络层数的加深，<code>3 x 3</code>和<code>5 x 5</code><strong>卷积的数量增加</strong>，因为网络越深，网络提取的特征越抽象，通过增加卷积核的数量可以将前面的特征组合起来，从而使各种特征的可能性覆盖得更全面。</li></ul><h2 id="5-2-dimension-reduction"><a href="#5-2-dimension-reduction" class="headerlink" title="5.2 dimension reduction"></a>5.2 dimension reduction</h2><p>第一个版本的Inception结构有一个明显的问题，随着网络层数加深，Inception中<code>5 x 5</code>卷积核数量增加，这将非常消耗计算资源。可以在<code>3 x 3</code>和<code>5 x 5</code>卷积之前使用一个<code>1 x 1</code>卷积用来<strong>降低数据维度</strong>，从而减少计算量，另外需要在<code>1 x 1</code>卷积之后接一个<code>ReLU</code>激活函数。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200716214948.png" srcset="/img/loading.gif" alt=""></p><h1 id="6-GoogLeNet"><a href="#6-GoogLeNet" class="headerlink" title="6. GoogLeNet"></a>6. GoogLeNet</h1><p>模型输入是一个经过0均值处理之后的<code>224 x 224</code>的RGB图像数据。</p><p>下图是GoogLeNet的一些细节，所有的卷积操作之后都有一个<code>ReLU</code>单元，<code>#3 x 3 reduce</code>表示Inception中<code>3 x 3</code>卷积之前的<code>1 x 1</code>卷积核的数量</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200716222813.png" srcset="/img/loading.gif" alt=""></p><p>下图是GoogLeNet的网络结构。网络中通过使用<strong>辅助分类器缓解梯度消失问题</strong>，辅助分类器在训练过程中，需要将其loss值添加到总的loss中（乘以权重0.3），在测试时，将辅助分类器抛弃不用。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200716222859.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VGG论文笔记</title>
    <link href="/2020/07/14/VGG%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/14/VGG%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p><a href="https://arxiv.org/pdf/1409.1556.pdf" target="_blank" rel="noopener">论文地址</a></p><p>论文主要针对卷积神经网络的深度对大规模图像集识别精度的影响，主要贡献是使用很小的卷积核(<code>3×3</code>)构建各种深度的卷积神经网络结构。</p><h2 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h2><ul><li>使用小卷积核，几乎全部使用<code>3 x 3</code>的卷积核；</li><li>网络层数深；</li><li>小池化核，使用的都是<code>2 x 2</code>的池化核；</li><li>前两个全连接层使用<code>dropout</code>正则化；</li><li>测试阶段，全连接层转换成卷积层。</li></ul><h1 id="2-VGG网络结构"><a href="#2-VGG网络结构" class="headerlink" title="2. VGG网络结构"></a>2. VGG网络结构</h1><p>VGG的输入是一个固定大小为<code>224 x 224 x 3</code> 的RGB图像，唯一的图像预处理是使用了均值减法。网络中大部分使用的是<code>3 x 3</code>的卷积核，其中 stride = 1， padding = 1， 即使用same卷积，只有在网络<code>C</code>中使用了<code>1 x 1</code>卷积。网络中有5个最大池化层，池化层放在几个卷积层之后，其中池化层的大小为<code>2 x 2</code>, stride = 2。卷积层之后是3个全连接层，第一个全连接层的输入大小为<code>7 x 7 x 512</code>，与AlexNet网络一样，神经元的数量分别是4096、4096、1000, 其中前两个全连接层使用<code>dropout</code>正则化（<code>keep_prob = 0.5</code> ）。最后一层是<code>softmax</code>层。</p><h2 id="2-1-配置"><a href="#2-1-配置" class="headerlink" title="2.1 配置"></a>2.1 配置</h2><p>设计了如下<code>A-E</code>6个网络，网络深度从11增加到19，channel数从64增加到512，channel要么不变，要么加倍。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200714210701.png" srcset="/img/loading.gif" alt=""></p><h2 id="2-2-讨论"><a href="#2-2-讨论" class="headerlink" title="2.2 讨论"></a>2.2 讨论</h2><p>AlexNet第一层使用卷积核大小为<code>7 x 7</code>， 步长为4的卷积，ZFNet第一层使用卷积核大小为<code>5 x 5</code>, 步长为2的卷积，而我们在整个网络中都是使用<code>3 x 3</code>的卷积（除了在网络C中使用了<code>1 x 1</code>卷积）。不难发现：2个<code>3 x 3</code>的卷积层的感受野为<code>5 x 5</code>; 3个<code>3 x 3</code>的卷积层的感受野是<code>7 x 7</code>。</p><p><strong>1. 为什么使用3个<code>3 x 3</code>的卷积层代替单个<code>7 x 7</code>的卷积层？</strong></p><ul><li>3个卷积层之后都有一个<code>ReLU</code>激活函数，增加了非线性程度，使决策函数更具可分性；</li><li>减少了参数数量。</li></ul><p><strong>2. 为什么使用<code>1 x 1</code>卷积？</strong></p><ul><li>增加决策函数的非线性程度但不影响感受野。</li></ul><h1 id="3-训练"><a href="#3-训练" class="headerlink" title="3. 训练"></a>3. 训练</h1><p>参数优化使用小批量梯度下降法，momentum = 0.9， batch_size = 256；使用$L_2$正则化， 正则化参数为5e-4；学习率初始化为0.01, 当验证集准确率不变时，学习率除以10。</p><h2 id="3-1-初始化参数"><a href="#3-1-初始化参数" class="headerlink" title="3.1 初始化参数"></a>3.1 初始化参数</h2><ol><li><p>随机初始化：均值为0，方差为1e-2的正态分布， biases初始为0.</p></li><li><p>先对Net-A进行训练，然后对后面的网络如Net-B,Net-C,Net-D训练时，将Net-A的权重赋给Net-B,Net-C,Net-D,其他不同的层，采用1中的随机初始化方式。</p></li></ol><h2 id="3-2-数据增广"><a href="#3-2-数据增广" class="headerlink" title="3.2 数据增广"></a>3.2 数据增广</h2><p>先对图像进行缩放(rescale)，然后进行随机水平翻转、随机RGB color shift，最后进行随机剪裁获得<code>224 x 224</code>的图像。</p><h3 id="训练集图像尺寸"><a href="#训练集图像尺寸" class="headerlink" title="训练集图像尺寸"></a>训练集图像尺寸</h3><p>假设图像缩放的尺寸为 S (training scale)，那么$ S \ge 224$。有两种设置S的方法：</p><ol><li><code>single-scale training</code>: 使用固定的S ；</li><li><code>multi-scale training</code>: 在 $[S_{min}, S_{max}]$ 中随机选择一个S （实验中$S_{min}$ = 256, $S_{max}$ = 512），也能被视作<code>scale jittering</code>。</li></ol><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h1><p>测试图片缩放的尺寸为Q（test scale）。<strong>测试时，将全连接层替换成卷积层，即将第一个全连接层转换为<code>7 x 7</code>的卷积，后面两个全连接层转换为<code>1 x 1</code>的卷积, 这种方式称为dense evaluation</strong>。这样进行测试时，直接将<code>Q x Q</code>的图片数据输入即可，而不需要对测试集进行剪裁。</p><p><strong>为什么使用<code>7 x 7</code>的卷积？</strong></p><ul><li>网络中使用的same卷积，总共使用了5个池化层，则全连接层的输入为<code>7 x 7 x 512</code>（因为224 / 32 = 7, channel为512），那么第一个全连接层的参数尺寸为<code>(4096, 7 x 7 x 512)</code>。转换后参数数量不变，应该使用4096个<code>7 x 7</code>卷积（channel = 512），卷积之后的输出为<code>1 x 1 x 4096</code>。</li></ul><p><strong><code>1 x 1</code>卷积</strong></p><ul><li>第二个全连接层：参数尺寸为<code>(4096, 4096)</code>, 使用4096个<code>1 x 1</code>卷积（channel = 4096），输出为<code>1 x 1 x 4096</code>;</li><li>第三个全连接层：参数尺寸为<code>(4096, 1000)</code>, 使用1000个<code>1 x 1</code>卷积（channel = 4096），输出为<code>1 x 1 x 1000</code></li></ul><p>对测试过程进行举例说明，假如全连接层的输入为<code>8 x 8 x 512</code>（因为测试时输入图像不一定是<code>224 x 224</code>）, 三个全连接层分别替换成4096个<code>7 x 7</code>卷积、4096个<code>1 x 1</code>卷积、1000个<code>1 x 1</code>卷积，输出分别是<code>2 x 2 x 4096</code>、<code>2 x 2 x 4096</code>、<code>2 x 2 x 1000</code>, 那么最后的feature map大小为<code>2 x 2 x 1000</code>, 但只有1000个分类，所以需要对feature map求平均值，使其大小变为<code>1 x 1 x 1000</code>。</p><h2 id="4-1-单尺度评估"><a href="#4-1-单尺度评估" class="headerlink" title="4.1 单尺度评估"></a>4.1 单尺度评估</h2><p><strong>测试图像固定尺度。</strong></p><p>$Q = S$ 或者 $Q = 0.5(S_{min} + S_{max})$</p><p>单尺度评估结果如下：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200714225023.png" srcset="/img/loading.gif" alt=""></p><p>其中<code>top-5 error</code>: 预测5次，如果5次预测都错才算预测错误，以此来计算错误率。</p><ul><li>随着网络深度的加深，错误率降低，当网络层数达到19时，错误率达到饱和。</li><li>训练图像尺度抖动优于使用固定边S.</li></ul><h2 id="4-2-多尺度评估"><a href="#4-2-多尺度评估" class="headerlink" title="4.2 多尺度评估"></a>4.2 多尺度评估</h2><p><strong>测试图像的尺度抖动对性能的影响。</strong></p><p>$Q = \{S - 32, S, S + 32\}$ 或者 $Q = \{S_{min}, 0.5(S_{min} + S_{max}), S_{max}\}$</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200714225126.png" srcset="/img/loading.gif" alt=""></p><ul><li>训练图像尺度抖动优于使用固定边S；</li><li>测试阶段使用尺度抖动（scale jittering）能提高性能（与使用单尺度相比）。</li></ul><h2 id="4-3-多剪裁图像评估"><a href="#4-3-多剪裁图像评估" class="headerlink" title="4.3 多剪裁图像评估"></a>4.3 多剪裁图像评估</h2><ul><li>dense evaluation：全连接层转换成卷积层进行测试；</li><li>multi-crop evaluation： 与训练过程一样，对测试图像进行随机剪裁，将得到的多张剪裁图像输入到网络中，最后取平均值。</li></ul><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200715094536.png" srcset="/img/loading.gif" alt=""></p><p>两种方式是互补的，使用两种方式的组合优于其中任何一种方法。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习图像通道channel</title>
    <link href="/2020/07/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9B%BE%E5%83%8F%E9%80%9A%E9%81%93channel/"/>
    <url>/2020/07/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9B%BE%E5%83%8F%E9%80%9A%E9%81%93channel/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于一般的彩色图像，有RGB三个颜色通道。使用三位数组表示彩色图像数据时，默认情况下，通道维度为最后一个维度，但出于性能调整的原因，也可能是第一个维度，这两种表示方法分别叫做<code>Channels-Last</code>和<code>Channels-First</code>。比如对于一个<code>64 x 64 x 3</code>的图像，其通道为3，保存在最后一个维度，调整到第一个维度则变成<code>3 x 64 x 64</code>。</p><ul><li><strong>Channels First</strong>: 对于图像数据而言，第一个通道为颜色通道；</li><li><strong>Channels Last</strong>：最后一个通道为颜色通道。</li></ul><h1 id="如何改变通道顺序"><a href="#如何改变通道顺序" class="headerlink" title="如何改变通道顺序"></a>如何改变通道顺序</h1><p>使用numpy的<code>moveaxis</code>函数, source轴移动到destination轴，其他轴顺序不变：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">moveaxis</span><span class="hljs-params">(a, source, destination)</span>:</span>    <span class="hljs-string">"""    Move axes of an array to new positions.    Other axes remain in their original order.    Examples    --------    &gt;&gt;&gt; x = np.zeros((3, 4, 5))    &gt;&gt;&gt; np.moveaxis(x, 0, -1).shape    (4, 5, 3)    &gt;&gt;&gt; np.moveaxis(x, -1, 0).shape    (5, 3, 4)    These all achieve the same result:    &gt;&gt;&gt; np.transpose(x).shape    (5, 4, 3)    &gt;&gt;&gt; np.swapaxes(x, 0, -1).shape    (5, 4, 3)    &gt;&gt;&gt; np.moveaxis(x, [0, 1], [-1, -2]).shape    (5, 4, 3)    &gt;&gt;&gt; np.moveaxis(x, [0, 1, 2], [-1, -2, -3]).shape    (5, 4, 3)    """</span></code></pre></div><p>比如将<code>64 x 64 x 3</code>的图像转换为<code>3 x 64 x 64</code>:</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npx = np.random.randn(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">3</span>)x = np.moveaxis(x, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>)</code></pre></div><h1 id="各框架下通道顺序"><a href="#各框架下通道顺序" class="headerlink" title="各框架下通道顺序"></a>各框架下通道顺序</h1><ul><li>Pytorch：<code>(N, C, H, W)</code>, 即Channels First；</li><li>Tensorflow: <code>(N, H, W, C)</code>，即Channels Last，也支持<code>(N, C, H, W)</code></li></ul><p>其中：</p><blockquote><p>N: 样本数量；C: channel；H: 图像高度；W: 图像宽度</p></blockquote><h2 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h2><p>在使用卷积时，需要填写<code>channel</code>参数。Pytorch的Conv2d函数如下：</p><div class="hljs"><pre><code class="hljs python">torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>, dilation=<span class="hljs-number">1</span>, groups=<span class="hljs-number">1</span>, bias=<span class="hljs-keyword">True</span>, padding_mode=<span class="hljs-string">'zeros'</span>)</code></pre></div><p>Conv2d函数中关于channel有两个参数：in_channels表示输入图像通道数，out_channels表示输出通道数，其实就是表示<strong>卷积核的数量</strong>。</p><blockquote><ul><li><strong>in_channels</strong> (<a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><em>int</em></a>) – Number of channels in the input image</li><li><strong>out_channels</strong> (<a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><em>int</em></a>) – Number of channels produced by the convolution</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AlexNet论文笔记</title>
    <link href="/2020/07/13/AlexNet%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/13/AlexNet%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>AlexNet是一个大型的深层神经网络，能够对高分辨率(high resolution)的图像进行分类。AlexNet是2012年论文<a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks" target="_blank" rel="noopener">ImageNet Classification with Deep ConvolutionalNeural Networks</a>中提出的一种卷积神经网络结构，并在12年的ImageNet分类赛上以大幅优势领先第二名，从而使得深度卷积神经网络CNN在图像分类上的应用掀起一波热潮，AlexNet使用了一些新的技术，比如使用ReLU激活函数加速训练，采用了Dropout防止过拟合，使用双GPU并行训练加快训练速度。</p><h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><p>AlexNet由5个卷积层 + 3个全连接层构成。</p><h2 id="非线性ReLU函数"><a href="#非线性ReLU函数" class="headerlink" title="非线性ReLU函数"></a>非线性ReLU函数</h2><p>使用ReLU激活函数比sigmoid或者tanh效果更好，因为sigmoid和tanh在深层神经网络的训练中容易造成梯度饱和，从而降低收敛的速度，使用ReLU函数训练速度更快。</p><h2 id="Overlapping-Pooling-重叠池化"><a href="#Overlapping-Pooling-重叠池化" class="headerlink" title="Overlapping Pooling(重叠池化)"></a>Overlapping Pooling(重叠池化)</h2><p>假设池化层的 kernel_size 为 z, 步长为 s。如果<code>z = s</code>, 则池化不会发生重合；如果<code>z &gt; s</code>，则会出现重合。AlexNet使用 z = 3, s = 2的最大池化。训练模型发现使用重叠池化更难发生过拟合现象。</p><h2 id="Local-Response-Normalization-局部响应归一化"><a href="#Local-Response-Normalization-局部响应归一化" class="headerlink" title="Local Response Normalization(局部响应归一化)"></a>Local Response Normalization(局部响应归一化)</h2><p>该方法未得到广泛应用，现在多用Batch Normalization进行归一化操作。</p><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200713140740.png" srcset="/img/loading.gif" alt=""></p><p>输入<code>224 x 224 x 3</code>的三通道图像</p><ul><li>第一个卷积层：96个大小为<code>11 x 11 x 3</code>的卷积核，卷积步长 stride = 4，输出<code>55 x 55 x 96</code>大小的数据（注意：$(224 - 11) / 4 +1= 54.25$, 卷积运算最后一次滑动一步），然后经过最大池化，输出大小为<code>27 x 27 x 96</code>；</li><li>第二个卷积层：256个大小为<code>5 x 5 x 96</code>的卷积核, same卷积，输出为<code>27 x 27 x 256</code>, 然后经过最大池化，输出为<code>13 x 13 x 256</code>;</li><li>第三个卷积层：384个大小为<code>3 x 3 x 256</code>的卷积核，same卷积，输出为<code>13 x 13 x 384</code>;</li><li>第四个卷积层：384个大小为<code>3 x 3 x 384</code>的卷积核，same卷积，输出为<code>13 x 13 x 384</code>;</li><li>第五个卷积层：256个大小为<code>3 x 3 x 384</code>的卷积核，same卷积，输出为<code>13 x 13 x 256</code>, 然后经过最大池化，输出为<code>6 x 6 x 256</code>，将数据展开传到全连接层;</li><li>三个全连接层：最后三个全连接层的神经元数量分别为4096、4096、1000.</li></ul><h1 id="降低过拟合"><a href="#降低过拟合" class="headerlink" title="降低过拟合"></a>降低过拟合</h1><h2 id="数据增广"><a href="#数据增广" class="headerlink" title="数据增广"></a>数据增广</h2><ol><li>图像平移和水平反射。通过从256×256幅图像中提取随机224×224块图像(及其水平反射的图像)，其实就是随机剪裁（crop），并在这些提取的图像上训练我们的网络。这将我们的训练集的大小增加了2048倍（因为：$(256 - 224)^2 \times 2 = 2048$）。<ul><li><strong>测试的时候</strong>：对左上、左下、右上、右下、中间这几个位置分别剪裁，然后对图像进行水平翻转，再进行剪裁，最终进行了10次剪裁，即一张图片经过数据增强获得了10张图片，这种剪裁的方式称为<strong>10-crop</strong>。然后将这10张图片输入网络中，得到10个输出，将输出进行平均，得到最后结果。</li></ul></li><li>改变了训练图像中RGB通道的强度。在整个imagenet训练集中对RGB像素值集执行PCA（主成分分析）操作。</li></ol><h2 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h2><p>采用<code>keep_prob = 0.5</code>的Dropout正则化，主要是在全连接层前两层使用Dropout。这种技术减少神经元之间的相互适应，因为神经元不能依赖其他神经元的存在。实验发现Dropout使迭代次数加倍。</p><p>训练时使用全部神经元，但是乘上系数<code>keep_prob</code>。</p><h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p>使用小批量梯度下降法进行参数更新，其中<code>momentum = 0.9</code>, <code>weight_decay = 0.0005</code>.参数更新公式如下：</p><script type="math/tex; mode=display">v_{i+1} = 0.9v_i - 0.0005·\epsilon·\omega_i - \epsilon·d\omega</script><script type="math/tex; mode=display">\omega_{i + 1} = \omega_{i} + v_{i + 1}</script>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Batch Normalization</title>
    <link href="/2020/07/11/Batch%20Normalization/"/>
    <url>/2020/07/11/Batch%20Normalization/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="提出背景"><a href="#提出背景" class="headerlink" title="提出背景"></a>提出背景</h1><p>对于深层网络的训练，调参非常困难，因为层与层之间存在高度的关联性和耦合性。当底层网络中的参数发生微弱变化时，这些微弱的变化随着网络层数的加深而被放大。对于深层网络，主要存在以下两个问题：</p><ul><li>上层网络需要不停调整来适应输入数据分布的变化，导致学习速率的降低；</li><li>网络的训练容易陷入梯度饱和区，减缓网络收敛速度：比如对于sigmoid或者tanh激活函数，网络训练过程中，随着层数的加深，输出的结果会越来越大，此时容易陷入梯度饱和区，梯度趋近于0，参数的更新速度就会减慢。</li></ul><h1 id="Batch-Normalization-批量归一化"><a href="#Batch-Normalization-批量归一化" class="headerlink" title="Batch Normalization (批量归一化)"></a>Batch Normalization (批量归一化)</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为在深层网络中，数据分布不同、输出数值较大对网络的训练影响较大，那么只要能解决这两个问题就能对网络有很好的优化。可以尝试将数据中的每个特征转换成符合标准正态分布的数据（即期望为0， 方差为1）。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>在一个神经网络中，对于第$l$层有如下定义：</p><ul><li>m: 样本数量；</li><li>$\mu_j$：第 j 个神经元的平均值；</li><li>$\sigma_j^2$：第 j 个神经元的方差；</li></ul><p>对数据进行batch normalizaiton操作（对Z还是对A进行norm操作没有定论，一般对Z进行norm操作）：</p><script type="math/tex; mode=display">\begin{array}{l}\mu_{j}=\frac{1}{m} \sum_{i=1}^{m} Z_{j}^{(i)} \\\sigma_{j}^{2}=\frac{1}{m} \sum_{i=1}^{m}\left(Z_{j}^{(i)}-\mu_{j}\right)^{2} \\\hat{Z}_{j}=\frac{Z_{j}-\mu_{j}}{\sqrt{\sigma_{j}^{2}+\epsilon}}\end{array}</script><blockquote><p>$\epsilon 防止方差为0$</p></blockquote><p>上述操作可以概括为：先对数据进行0中心化操作，然后除以标准差。通过上述变换，<strong>将每个特征的分布均值为0，方差为1</strong></p><p>但这样会使数据的分布始终不变，导致数据表达能力的缺失。对norm后的数据进行线性变换：$\hat{Z_j} = \gamma\hat Z_j + \beta$. <strong>其中$\gamma$ 和 $\beta$ 也是需要学习的参数</strong>，所以反向传播时需要求的梯度有：$dZ$ 、$d\gamma$、$d\beta$。</p><h2 id="测试阶段使用Batch-Normalization"><a href="#测试阶段使用Batch-Normalization" class="headerlink" title="测试阶段使用Batch Normalization"></a>测试阶段使用Batch Normalization</h2><p>使用norm时需要求特征的平均值和方差，这个只能对训练集使用，而不能直接求测试集的平均值和方差。比如，如果测试时，只有一个样本，求的平均值和方差就会有较大偏差。</p><p>正确做法是：保留训练集的平均值和方差，然后应用在测试数据上。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>使得网络中每层输入数据的分布相对稳定，加速模型学习速度；</li><li>使得模型对网络中的参数不那么敏感，简化调参过程，使得网络学习更加稳定，没有使用BN的深层网络底层参数发生细微变化，传递到深层后就会被放大。</li><li>允许网络使用饱和性激活函数，缓解梯度消失问题。</li><li>具有一定的正则化效果。</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>1. 为什么BN能够防止过拟合？</strong></p><blockquote><p>同样一个样本的输出不再仅仅取决于样本本身，也取决于跟这个样本属于同一个mini-batch的其它样本。</p></blockquote><p><strong>2. 为什么BN能够防止梯度消失？</strong></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络</title>
    <link href="/2020/07/09/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2020/07/09/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h1><p>计算机视觉面临一个挑战，就是数据的输入可能非常大。对于传统的全连接神经网络，数据庞大也就意味着需要训练的参数非常多，导致计算成本很大，效率很低。在这种情况下，难以获得足够的数据来防止过拟合，由此，出现了卷积神经网络。</p><p><em>CNN 有2大特点：</em></p><ul><li>能够有效的将大数据量的图片降维成小数据量；</li><li>能够有效的保留图片特征，符合图片处理的原则。</li></ul><h2 id="1-1-应用"><a href="#1-1-应用" class="headerlink" title="1.1 应用"></a>1.1 应用</h2><ul><li>图像分类、检索</li><li>目标定位检测</li><li>图像分割</li><li>人脸识别</li></ul><h2 id="1-2-几个常见问题"><a href="#1-2-几个常见问题" class="headerlink" title="1.2 几个常见问题"></a>1.2 几个常见问题</h2><p><strong>CNN模型所需的计算力（FLOPs：浮点运算数）如何计算？</strong></p><blockquote><p>卷积层：<img src="https://www.zhihu.com/equation?tex=%282%5Ctimes+C_%7Bi%7D+%5Ctimes+K%5E%7B2%7D-1%29%5Ctimes+H%5Ctimes+W%5Ctimes+C_%7Bo%7D" srcset="/img/loading.gif" alt="[公式]"></p><p>Ci=input channel, k=kernel size, HW=output feature map size, Co=output channel.</p></blockquote><h1 id="2-CNN的基本原理"><a href="#2-CNN的基本原理" class="headerlink" title="2. CNN的基本原理"></a>2. CNN的基本原理</h1><p>典型的卷积神经网络由3个部分组成：</p><ul><li>卷积层：提取图像中的局部特征，卷积计算后一般会使用激活函数；</li><li>池化层：降维；</li><li>全连接层：类似于传统神经网络，用来输出想要的结果。</li></ul><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200709155732.png" srcset="/img/loading.gif" alt=""> </p><h2 id="2-1-卷积"><a href="#2-1-卷积" class="headerlink" title="2.1 卷积"></a>2.1 卷积</h2><p>卷积层通过卷积核的过滤提取出图片中局部的特征，卷积层之后一般会使用激活函数进行非线性化。对于离散数据的卷积运算：首先将卷积核旋转$180^{\circ}$，然后将卷积核在图像上平滑，将卷积核与图像中对应元素相乘取和。具体的卷积操作，如下图所示（已经将卷积核旋转了$180^{\circ}$）：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/0_sxpi42l2IIpS2vuJ.gif" srcset="/img/loading.gif" alt=""><br>其中卷积核为：</p><script type="math/tex; mode=display">kernel = \begin{bmatrix}1&0&1\\0&1&0\\1&0&1\end{bmatrix}</script><p>卷积操作后输出的图像尺寸：$(n +2p -f)/s + 1$, 其中n为输入图像尺寸，padding为p, 卷积核大小为f， 步长为s。上图的卷积操作：n=5, p=0, f=3, s=1.</p><p>选择填充多少像素，将卷积分为：</p><ul><li>Valid卷积：不填充；</li><li>Same卷积：填充</li></ul><p>卷积核的大小一般为奇数：</p><ul><li>有一个中心点，便于指出过滤器的位置；</li><li>如果为偶数，需要使用不对称填充。</li></ul><p><strong>注意</strong>：按照数学中的卷积运算，需要将卷积核进行翻转操作，但在深度学习中，一般不使用翻转操作。</p><h3 id="padding（填充）"><a href="#padding（填充）" class="headerlink" title="padding（填充）"></a>padding（填充）</h3><p>卷积操作时，如果不填充，则每次运算完成后，图像将会缩小，而且图像边缘的大部分信息都丢失了。填充p个像素点后，图像大小变为<code>n+2p</code>。一般用0填充。</p><h3 id="strides（步长）"><a href="#strides（步长）" class="headerlink" title="strides（步长）"></a>strides（步长）</h3><p>步长是指平滑移动的距离。</p><h3 id="二维卷积与三维卷积"><a href="#二维卷积与三维卷积" class="headerlink" title="二维卷积与三维卷积"></a>二维卷积与三维卷积</h3><p><strong>在讨论卷积核的维度时，并不考虑channel维</strong>。<br>二维卷积核的大小实际是<code>(channel, k_h, k_w)</code>, 三维卷积核的大小是<code>(channel, k_d, k_h, k_w)</code>, k_d就是多出来的第三维，根据具体应用，在视频中就是时间维，在CT图像中就是层数维。</p><ul><li>在二维卷积中，卷积核滑动维度是2维的；</li><li>在三维卷积中，卷积核滑动维度是3维的。</li></ul><h4 id="二维卷积"><a href="#二维卷积" class="headerlink" title="二维卷积"></a>二维卷积</h4><p>例如，输入图像大小为<code>(3, height, weight)</code>，其中channel为3, 卷积核尺寸为<code>(3, k_h, k_w)</code>, channel与输入图像一致. 进行卷积操作时，卷积核只是在<code>(height, weight)</code>这两维上进行滑窗操作。</p><h4 id="三维卷积"><a href="#三维卷积" class="headerlink" title="三维卷积"></a>三维卷积</h4><p>与2D卷积不同之处在于，输入图像多了一个 <code>depth</code> 维度，故输入大小为<code>(3, depth, height, width)</code>，卷积核也多了一个k_d维度，因此卷积核在输入3D图像的空间维度（height和width维）和depth维度上均进行滑窗操作.</p><h2 id="2-2-池化"><a href="#2-2-池化" class="headerlink" title="2.2 池化"></a>2.2 池化</h2><p>池化层就是下采用，降低数据的维度，提高计算速度，同时提高提取特征的鲁棒性。池化的运算过程：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/0_JjtDg7FAhjQOrld-.gif" srcset="/img/loading.gif" alt=""></p><h3 id="最大池化"><a href="#最大池化" class="headerlink" title="最大池化"></a>最大池化</h3><p>提取过滤器范围内的最大值。</p><h3 id="平均池化"><a href="#平均池化" class="headerlink" title="平均池化"></a>平均池化</h3><p>过滤器范围内的数据取平均值，平均池化使用较少。</p><h1 id="3-反向传播"><a href="#3-反向传播" class="headerlink" title="3. 反向传播"></a>3. 反向传播</h1><h2 id="3-1-卷积层的反向传播"><a href="#3-1-卷积层的反向传播" class="headerlink" title="3.1 卷积层的反向传播"></a>3.1 卷积层的反向传播</h2><p>卷积层的反向传播比全连接神经网络的反向传播要复杂许多，现举例说明。假设第 $l$ 层的输入数据为X：</p><script type="math/tex; mode=display">X = \begin{bmatrix}x_{11}&x_{12}&x_{13} \\x_{21}&x_{22}&x_{23} \\x_{31}&x_{32}&x_{33}\end{bmatrix}</script><p>卷积核F为：</p><script type="math/tex; mode=display">F = \begin{bmatrix}f_{11}&f_{12} \\f_{21}&f_{22} \end{bmatrix}</script><p>假设步长为1，padding为0，那么经过卷积运算后的结果为 A：</p><script type="math/tex; mode=display">A = \begin{bmatrix}a_{11}&a_{12}\\a_{21}&a_{22}\end{bmatrix}</script><p>则有：</p><script type="math/tex; mode=display">\begin{array}{}\frac{\partial A_{11}}{\partial F_{11}} = x_{11}, \frac{\partial A_{11}}{\partial F_{12}} = x_{12} ,\ldots\\ \\\frac{\partial A_{12}}{\partial F_{11}} = x_{12}, \frac{\partial A_{12}}{\partial F_{12}} = x_{13} ,\ldots \\\end{array}</script><p>使用链式规则有：</p><script type="math/tex; mode=display">\frac{\partial J}{\partial F_i} = \sum_{k = 1}^{m}\frac{\partial J}{\partial A_k} \times \frac{\partial A_k}{\partial F_i}</script><p>分别对F求梯度，则有如下四个式子成立：</p><script type="math/tex; mode=display">\begin{array}{}\frac{\partial J}{\partial F_{11}} = \frac{\partial J}{\partial A_{11}} \times \frac{\partial A_{11}}{\partial F_{11}} + \frac{\partial J}{\partial A_{12}} \times \frac{\partial A_{12}}{\partial F_{11}} + \frac{\partial J}{\partial A_{21}} \times \frac{\partial A_{21}}{\partial F_{11}} + \frac{\partial J}{\partial A_{22}} \times \frac{\partial A_{22}}{\partial F_{11}}\\= \frac{\partial J}{\partial A_{11}} \times x_{11} + \frac{\partial J}{\partial A_{12}} \times  x_{12} + \frac{\partial J}{\partial A_{21}} \times x_{21} + \frac{\partial J}{\partial A_{22}} \times  x_{22}\end{array} \tag{1}</script><script type="math/tex; mode=display">\begin{array}{}\frac{\partial J}{\partial F_{12}} = \frac{\partial J}{\partial A_{11}} \times \frac{\partial A_{11}}{\partial F_{12}} + \frac{\partial J}{\partial A_{12}} \times \frac{\partial A_{12}}{\partial F_{12}} + \frac{\partial J}{\partial A_{21}} \times \frac{\partial A_{21}}{\partial F_{12}} + \frac{\partial J}{\partial A_{22}} \times \frac{\partial A_{22}}{\partial F_{12}} \\= \frac{\partial J}{\partial A_{11}} \times x_{12} + \frac{\partial J}{\partial A_{12}} \times  x_{13} + \frac{\partial J}{\partial A_{21}} \times x_{22} + \frac{\partial J}{\partial A_{22}} \times  x_{23}\end{array} \tag{2}</script><script type="math/tex; mode=display">\begin{array}{}\frac{\partial J}{\partial F_{21}} = \frac{\partial J}{\partial A_{11}} \times \frac{\partial A_{11}}{\partial F_{21}} + \frac{\partial J}{\partial A_{12}} \times \frac{\partial A_{12}}{\partial F_{21}} + \frac{\partial J}{\partial A_{21}} \times \frac{\partial A_{21}}{\partial F_{21}} + \frac{\partial J}{\partial A_{22}} \times \frac{\partial A_{22}}{\partial F_{21}} \\= \frac{\partial J}{\partial A_{11}} \times x_{21} + \frac{\partial J}{\partial A_{12}} \times  x_{22} + \frac{\partial J}{\partial A_{21}} \times x_{31} + \frac{\partial J}{\partial A_{22}} \times  x_{32}\end{array} \tag{3}</script><script type="math/tex; mode=display">\begin{array}{}\frac{\partial J}{\partial F_{22}} = \frac{\partial J}{\partial A_{11}} \times \frac{\partial A_{11}}{\partial F_{22}} + \frac{\partial J}{\partial A_{12}} \times \frac{\partial A_{12}}{\partial F_{22}} + \frac{\partial J}{\partial A_{21}} \times \frac{\partial A_{21}}{\partial F_{22}} + \frac{\partial J}{\partial A_{22}} \times \frac{\partial A_{22}}{\partial F_{22}} \\= \frac{\partial J}{\partial A_{11}} \times x_{22} + \frac{\partial J}{\partial A_{12}} \times  x_{23} + \frac{\partial J}{\partial A_{21}} \times x_{32} + \frac{\partial J}{\partial A_{22}} \times  x_{33}\end{array} \tag{4}</script><p>不难发现，对F求梯度，实际上就是X与$\frac{\partial J}{\partial A}$进行卷积运算：</p><script type="math/tex; mode=display">\frac{\partial J}{\partial F} = X \ast \frac{\partial J}{\partial A}</script><h2 id="3-2-池化层的反向传播"><a href="#3-2-池化层的反向传播" class="headerlink" title="3.2 池化层的反向传播"></a>3.2 池化层的反向传播</h2><h3 id="最大池化-1"><a href="#最大池化-1" class="headerlink" title="最大池化"></a>最大池化</h3><p>假设池化层的输入X:</p><script type="math/tex; mode=display">X = \begin{bmatrix}4&3&0&1\\1&1&3&2\\5&0&1&1\\6&4&4&7\end{bmatrix}</script><p>经过<code>2 x 2</code>的最大池化层之后，结果为A: </p><script type="math/tex; mode=display">A = \begin{bmatrix}4&3\\6&7\end{bmatrix}</script><p>则$\frac{\partial A}{\partial X}$：</p><script type="math/tex; mode=display">\frac{\partial A}{\partial X} = \begin{bmatrix}1&0&0&0\\0&0&1&0\\0&0&0&0\\1&0&0&1\end{bmatrix}</script><p>因为使用的是最大池化，则A对X求偏导时，最大值处为1，其他为0，即在进行最大池化时需要保留最大值处的位置，才能进行反向传播。</p><h3 id="平均池化-1"><a href="#平均池化-1" class="headerlink" title="平均池化"></a>平均池化</h3><p>平均池化的反向传播更加简单。如果对上述的X进行<code>2 x 2</code>的平均池化，则$\frac{\partial A}{\partial X}$为：</p><script type="math/tex; mode=display">\frac{\partial A}{\partial X} = \begin{bmatrix}\frac{1}{4}&\frac{1}{4}&\frac{1}{4}&\frac{1}{4}\\\frac{1}{4}&\frac{1}{4}&\frac{1}{4}&\frac{1}{4}\\\frac{1}{4}&\frac{1}{4}&\frac{1}{4}&\frac{1}{4}\\\frac{1}{4}&\frac{1}{4}&\frac{1}{4}&\frac{1}{4}\end{bmatrix}</script>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络</title>
    <link href="/2020/07/07/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2020/07/07/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="note note-info">最后更新于2020-07-17：添加端到端概念</p><p class="note note-info">2020-07-16：添加梯度消失问题</p><h1 id="1-神经网络基础"><a href="#1-神经网络基础" class="headerlink" title="1. 神经网络基础"></a>1. 神经网络基础</h1><p>神经网络被建模成神经元的集合，神经元之间以无环图的形式进行连接。对于普通神经网络，最普通的层的类型是全连接层。全连接层中的神经元与其前后两层的神经元是全连接的。神经网络包括输入层、隐藏层、输出层，一般说N层神经网络的时候，忽略了输入层，比如下图是一个2层神经网络。<strong>输入层神经元节点的数量就是数据feature的数量。</strong></p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200707210313.png" srcset="/img/loading.gif" alt=""></p><p>一个神经元节点首先计算线性函数（$\omega x + b$），然后计算激活函数，然后将计算的结果传递到下一层。</p><p>训练神经网络的过程：</p><p>1） 参数的随机初始化；</p><p>2） 前向传播；</p><p>3） 计算代价；</p><p>4）反向传播计算所有偏导数；</p><p>5） 利用数值检验方法检验这些偏导数；</p><p>6）使用优化来最小化代价函数。</p><p>用上图的2层神经网络举例说明<strong>前向传播</strong>的过程，输入是一个<code>3 x 1</code>的向量，第一个隐藏层的权重W1是<code>4 x 3</code>的向量,偏置b1是<code>4 x 1</code>的向量，在隐藏层中的计算为：$f(W_1 x + b_1)$，其中输出数据大小为<code>4 x 1</code>；输出层的权重W2是<code>2 x 4</code>, 偏置为<code>2 x 1</code>, 输出层通常没有激活函数，则计算为：$W_2 x + b_2$, 最后输出数据为<code>2 x 1</code>的向量。</p><h2 id="1-1-数据预处理"><a href="#1-1-数据预处理" class="headerlink" title="1.1 数据预处理"></a>1.1 数据预处理</h2><p>假设输入数据为X，大小为<code>n x m</code>，其中n指的特征的数量，m指的是样本的数量。</p><h3 id="1-1-1-均值减法（Mean-subtraction）"><a href="#1-1-1-均值减法（Mean-subtraction）" class="headerlink" title="1.1.1 均值减法（Mean subtraction）"></a>1.1.1 均值减法（Mean subtraction）</h3><p>对数据每个独立特征减去平均值（<strong>注意：平均值指的是每个样本对应特征的平均值，而不是对单个样本的数据求平均值</strong>）, 其实就是在每个维度上将数据的中心移到原点，也就是做0中心化（zero-centered）处理。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npX -= np.mean(X, axis=<span class="hljs-number">1</span>)</code></pre></div><h3 id="1-1-2-归一化-Normalization"><a href="#1-1-2-归一化-Normalization" class="headerlink" title="1.1.2 归一化 (Normalization)"></a>1.1.2 归一化 (Normalization)</h3><p>有两种方法：</p><ul><li>先对数据做0中心化，然后每个维度都除以其标准差。</li></ul><div class="hljs"><pre><code class="hljs undefined">X <span class="hljs-string">/=</span> np.std<span class="hljs-params">(X, <span class="hljs-attr">axis</span>=1)</span></code></pre></div><ul><li>对每个维度都做归一化。</li></ul><p><strong>常见错误</strong>：<strong>数据预处理只能在训练集数据上进行计算</strong>。比如，先从训练集中求图片平均值，然后训练集、验证集、测试集中的图像再减去这个平均值。</p><h2 id="1-2-随机初始化"><a href="#1-2-随机初始化" class="headerlink" title="1.2 随机初始化"></a>1.2 随机初始化</h2><h3 id="1-2-1-权重初始化"><a href="#1-2-1-权重初始化" class="headerlink" title="1.2.1 权重初始化"></a>1.2.1 权重初始化</h3><ul><li>小随机数初始化</li></ul><div class="hljs"><pre><code class="hljs python">W = np.random.randn(D, H) * <span class="hljs-number">0.01</span></code></pre></div><ul><li>使用<code>1/sqrt(m)</code>校准方差：这样可以将神经元输出归一化到1：<code>W = np.random.randn(m) / sqrt(m)</code>， m为样本数量。针对ReLU神经元的特殊初始化：<code>w = np.random.randn(m) * sqrt(2.0 / m)</code></li></ul><h3 id="1-2-2-偏置初始化"><a href="#1-2-2-偏置初始化" class="headerlink" title="1.2.2 偏置初始化"></a>1.2.2 偏置初始化</h3><p>通常将偏置初始化为0，这是因为权重的随机初始化已经打破了对称性。</p><h2 id="1-3-学习之前的合理性检查"><a href="#1-3-学习之前的合理性检查" class="headerlink" title="1.3 学习之前的合理性检查"></a>1.3 学习之前的合理性检查</h2><ul><li>寻找特定情况下的正确损失值，比如使用一个样本，正则化强度设置为0，检查损失值是否符合预期。</li><li>提高正则化强度时导致损失值变大；</li><li>对小数据集过拟合。使用一个小数据集，正则化强度设置为0，确保训练后能够到达0的损失值。</li></ul><h2 id="1-4-检查整个学习过程"><a href="#1-4-检查整个学习过程" class="headerlink" title="1.4 检查整个学习过程"></a>1.4 检查整个学习过程</h2><ul><li>跟踪损失值；</li><li>跟踪训练集和验证集准确度的变化过程：判断是否过拟合。</li><li>第一层可视化：下图是将神经网络第一层的权重可视化的例子。左图中的特征充满了噪音，这暗示了网络可能出现了问题：网络没有收敛，学习率设置不恰当，正则化惩罚的权重过低。右图的特征不错，平滑，干净而且种类繁多，说明训练过程进行良好。</li></ul><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200708160346.png" srcset="/img/loading.gif" alt=""></p><h2 id="1-5-epoch、iteration、batch-size"><a href="#1-5-epoch、iteration、batch-size" class="headerlink" title="1.5 epoch、iteration、batch_size"></a>1.5 epoch、iteration、batch_size</h2><p>神经网络中epoch与iteration是不相等的</p><ul><li>batch_size：批大小，一次训练选取的样本大小。在深度学习中，一般采用SGD训练，即每次训练在训练集中取batch_size个样本训练；</li><li>iteration：中文翻译为迭代，1个iteration等于使用batch_size个样本训练一次；一个迭代 = 一个正向传播+一个反向传播；</li><li>epoch：迭代次数，1个epoch等于使用训练集中的全部样本训练一次；一个epoch = 所有训练样本的一个正向传递和一个反向传递。</li></ul><h2 id="1-6-感受野（receptive-field）"><a href="#1-6-感受野（receptive-field）" class="headerlink" title="1.6 感受野（receptive field）"></a>1.6 感受野（receptive field）</h2><p>感受野是用来表示网络内部的不同位置的神经元对原始图像的感受范围的大小。</p><p>如下是一个感受野计算的例子：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200714204504.png" srcset="/img/loading.gif" alt=""></p><p>Conv1层使用一个<code>3 x 3</code>的卷积核，Conv2层使用一个<code>2 x 2</code>的卷积核。可以看出，Conv1中的一个单元能够看到原始图像的范围是<code>3 x 3</code>，Conv2中一个单元能看到<code>5 x 5</code>的范围，所以Conv1的感受野是<code>3 x 3</code>, Conv2的感受野是<code>5 x 5</code>。</p><p>计算公式是：</p><script type="math/tex; mode=display">r_{n} = r_{n - 1} + (k_n - 1)\prod_{i = 1}^{n - 1}s_i</script><p>其中 $r_n$ 表示第 n 层的感受野，$k_n$ 表示第 n 层的卷积核大小， $s_i$ 表示第 i 层卷积步长。 </p><h2 id="1-7-梯度消失"><a href="#1-7-梯度消失" class="headerlink" title="1.7 梯度消失"></a>1.7 梯度消失</h2><p>对于<code>sigmoid</code>和<code>tanh</code>激活函数而言，其梯度小于1，是一个比较小的数，在反向传播的过程中，不断衰减，如果网络层次比较深，梯度传递到低层网络时非常小，也就产生了梯度消失现象，导致参数更新缓慢，学习变慢。</p><p><strong>解决办法</strong></p><ul><li>使用ReLU、LeakReLU激活函数；</li><li>Batch Normalization</li><li>残差网络</li></ul><h2 id="1-8-端到端"><a href="#1-8-端到端" class="headerlink" title="1.8 端到端"></a>1.8 端到端</h2><p>端到端就是指输入是原始数据，输出就是最后结果。</p><p>比如对于一个目标检测模型，输入原始图像，最后就能直接输出目标的位置和目标的类别，这就是<strong>端到端</strong>的。但对于R-CNN这个模型，也是进行目标检测，需要先获取可能包含目标的候选框，然后将候选框输入到CNN模型中判断是否有目标以及目标的类别，这就是<strong>非端到端</strong>的。</p><h1 id="2-激活函数（activation-function）"><a href="#2-激活函数（activation-function）" class="headerlink" title="2. 激活函数（activation function）"></a>2. 激活函数（activation function）</h1><p>在神经元节点中线性计算后，然后使用激活函数，激活函数需要是一个非线性函数。使用激活函数是为了将神经元节点输出非线性化，如果只是使用线性函数，那么最后的输出将是几个线性函数的线性组合，那么设计多层的神经网络就变得没有任何意义。</p><h2 id="常用激活函数"><a href="#常用激活函数" class="headerlink" title="常用激活函数"></a>常用激活函数</h2><h3 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h3><p>sigmoid函数将输入压缩到 0 到 1 范围，主要用于二分类，比如logistics回归，如今sigmoid函数很少使用了。</p><script type="math/tex; mode=display">f(x) = \frac {1}{1 + e^{-x}}</script><p>sigmoid函数的导数为：</p><script type="math/tex; mode=display">\begin{array}{l}f^\prime(x) = \frac{e^{-x}}{(1 + e^{-x})^2} \\= f(x) - (f(x))^2\end{array}</script><p>sigmoid函数主要有以下两个缺点：</p><ul><li>输出不是0中心的。这一情况将影响梯度下降的运作。</li><li>sigmoid函数饱和使梯度消失。当激活函数的输入非常大或者非常小的时候，梯度几乎为0，那么最后相乘的结果也会接近0.</li></ul><h3 id="tanh函数"><a href="#tanh函数" class="headerlink" title="tanh函数"></a>tanh函数</h3><p>tanh函数将输入压缩至-1到1的范围，tanh函数是一个简单放大的sigmoid函数：$tanh(x) = 2\sigma(2x) - 1$</p><script type="math/tex; mode=display">f(x) = \frac{e^x - e^{-x}}{e^x + e^{-x}}</script><p>tanh函数的导数：</p><script type="math/tex; mode=display">f(x)^{\prime}=1-(\tanh (x))^{2}</script><p>解决了sigmoid函数的0中心化问题，但梯度消失问题仍然存在。</p><h3 id="ReLU函数-Rectified-Linear-Unit"><a href="#ReLU函数-Rectified-Linear-Unit" class="headerlink" title="ReLU函数(Rectified Linear Unit)"></a>ReLU函数(Rectified Linear Unit)</h3><p>ReLU函数（校正线性单元），是目前最常用的激活函数：</p><script type="math/tex; mode=display">f(x) = \max(0, x)</script><p>优点：</p><ul><li>对于随机梯度下降的收敛有巨大的加速作用。</li><li>sigmoid和tanh含有指数运算等耗时操作，ReLU 运算简单，计算速度快。</li><li>在正区间解决梯度消失问题。</li></ul><p>缺点：</p><ul><li>输出不是0中心化；</li><li>某些神经元可能永远不会被激活，导致相应的参数永远不能被更新。例如，learning_rate设置得太高，容易出现这种情况。合理设置learning_rate, 这种情况发生概率会降低。</li></ul><h3 id="Leaky-ReLU函数"><a href="#Leaky-ReLU函数" class="headerlink" title="Leaky ReLU函数"></a>Leaky ReLU函数</h3><p>为了解决ReLU死亡问题，ReLU函数的改进版本。</p><script type="math/tex; mode=display">f(x) = max(\alpha x, x)</script><p>其中$\alpha$ 是一个非常小的常量。</p><h1 id="3-优化"><a href="#3-优化" class="headerlink" title="3. 优化"></a>3. 优化</h1><h2 id="3-1-梯度下降法"><a href="#3-1-梯度下降法" class="headerlink" title="3.1 梯度下降法"></a>3.1 梯度下降法</h2><h3 id="批量梯度下降法（Batch-Gradient-Descent）"><a href="#批量梯度下降法（Batch-Gradient-Descent）" class="headerlink" title="批量梯度下降法（Batch Gradient Descent）"></a>批量梯度下降法（Batch Gradient Descent）</h3><p>更新参数时使用所有的样本进行更新，每迭代一步都需要用到训练集中的所有数据。</p><ul><li>缺点：样本数量很多时，训练过程很慢。</li></ul><h3 id="随机梯度下降法（Stochastic-Gradient-Descent）"><a href="#随机梯度下降法（Stochastic-Gradient-Descent）" class="headerlink" title="随机梯度下降法（Stochastic Gradient Descent）"></a>随机梯度下降法（Stochastic Gradient Descent）</h3><p>随机梯度下降法，每次训练一个样本，计算一个样本的梯度，然后进行参数更新。 </p><ul><li>优点：训练速度快；</li><li>缺点：准确度下降，并不是全局最优。</li></ul><h3 id="小批量梯度下降法（Mini-batch-Gradient-Descent）"><a href="#小批量梯度下降法（Mini-batch-Gradient-Descent）" class="headerlink" title="小批量梯度下降法（Mini-batch Gradient Descent）"></a>小批量梯度下降法（Mini-batch Gradient Descent）</h3><p>每次更新参数时使用小批量的样本。算法训练过程比较快，准确度也比较高。梯度下降会有一些震荡，但整体是下降的，因为mini-batch会出现一些噪音。</p><h2 id="3-2-梯度下降优化算法"><a href="#3-2-梯度下降优化算法" class="headerlink" title="3.2 梯度下降优化算法"></a>3.2 梯度下降优化算法</h2><p>梯度下降法的参数更新有多种方法。</p><h3 id="1-普通方法"><a href="#1-普通方法" class="headerlink" title="1. 普通方法"></a>1. 普通方法</h3><p>沿着负梯度方向改变参数。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 普通更新</span>W = W - learning_rate * dW</code></pre></div><h3 id="2-动量更新（Momentum）"><a href="#2-动量更新（Momentum）" class="headerlink" title="2. 动量更新（Momentum）"></a>2. 动量更新（Momentum）</h3><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 动量更新</span>v = mu * v - learning_rate * dWW += v</code></pre></div><p>其中v初始化为0，mu被看作动量，一般设为0.9，通产还可以是[0.5, 0.9, 0.95, 0.99]中的一个。</p><ul><li><p>在梯度方向改变时（比如v为负，dW为负），momentum能够降低参数更新速度，从而减少震荡；</p></li><li><p>在梯度方向相同时（比如v为负，dW为正），momentum可以加速参数更新， 从而加速收敛。</p></li></ul><p>总而言之，momentum能够加速SGD收敛，抑制震荡。</p><h3 id="3-Nesterov动量"><a href="#3-Nesterov动量" class="headerlink" title="3. Nesterov动量"></a>3. Nesterov动量</h3><div class="hljs"><pre><code class="hljs python">v_pre = v <span class="hljs-comment"># 存储备份</span>v = mu * v - learning_rate * dWW += -mu * v_pre + (<span class="hljs-number">1</span> + mu) * v</code></pre></div><h3 id="4-Adagrad"><a href="#4-Adagrad" class="headerlink" title="4. Adagrad"></a>4. Adagrad</h3><p>Adagrad是一个适应性学习率算法，自适用的为不同参数分配不同的学习率。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># cache存储梯度的平方和</span>cache += dW**<span class="hljs-number">2</span><span class="hljs-comment"># eps是一个很小的常量，防止出现0, 一般1e-4到1e-8之间</span>W += -learning_rate * dW / (np.sqrt(cache) + eps)</code></pre></div><p>随着迭代的增加，cache增大，学习率变小。因为随着训练的进行，越来越接近最优解，学习率相应变小。</p><h3 id="5-RMSprop"><a href="#5-RMSprop" class="headerlink" title="5. RMSprop"></a>5. RMSprop</h3><p>适应性学习率算法，与Adagrad不同的是，不会让学习率单调变小。</p><div class="hljs"><pre><code class="hljs python">cache = decay_rate * cache + (<span class="hljs-number">1</span> - decay_rate) * dx ** <span class="hljs-number">2</span>x += -learning_rate * dx / (np.sqrt(cache) + eps)</code></pre></div><p>decay_rate常用的值[0.9, 0.99, 0.999]</p><h3 id="6-Adam"><a href="#6-Adam" class="headerlink" title="6. Adam"></a>6. Adam</h3><p>看起来像RMSprop的动量版。</p><div class="hljs"><pre><code class="hljs python">m = beta1*m + (<span class="hljs-number">1</span>‐beta1)*dxv = beta2*v + (<span class="hljs-number">1</span>‐beta2)*(dx**<span class="hljs-number">2</span>)x += ‐ learning_rate * m / (np.sqrt(v) + eps)</code></pre></div><p>推荐参数值：eps=1e-8, beta1=0.9, beta2=0.999。</p><h2 id="3-3-学习率退火"><a href="#3-3-学习率退火" class="headerlink" title="3.3 学习率退火"></a>3.3 学习率退火</h2><p>学习率可能过大，逐步衰减学习率。</p><ul><li>随步数衰减：每进行几个周期就降低学习率。典型的值是每过5个周期就将学习率减少一半，或者每20个周期减少到之前的0.1；</li><li>指数衰减：$\alpha = \alpha_0 e^{-kt}$, 其中t 为迭代次数，k是超参数；</li><li>1/t 衰减: $ \alpha = \frac{\alpha_0}{1+ kt}$.</li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聚类与降维</title>
    <link href="/2020/07/05/%E8%81%9A%E7%B1%BB%E4%B8%8E%E9%99%8D%E7%BB%B4/"/>
    <url>/2020/07/05/%E8%81%9A%E7%B1%BB%E4%B8%8E%E9%99%8D%E7%BB%B4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="聚类任务"><a href="#聚类任务" class="headerlink" title="聚类任务"></a>聚类任务</h1><p>聚类算法是一个典型的无监督学习，训练的数据没有任何标签。聚类算法将数据集中的样本划分为若干个通常是不相交的子集，每个子集成为一个“簇”（cluster）。</p><h2 id="K均值算法（K-Means-Algorithm）"><a href="#K均值算法（K-Means-Algorithm）" class="headerlink" title="K均值算法（K-Means Algorithm）"></a>K均值算法（K-Means Algorithm）</h2><p>K均值算法是最普及的聚类算法，算法接受一个未标记的数据集，然后根据数据聚类成不同的组。</p><p>K均值是一个迭代算法，假设需要将数据聚类成K个簇，其方法为：</p><ul><li><ol><li>首先随机选择K个点，称为聚类中心；</li></ol></li><li><ol><li>对于数据集中的每一个数据，分别计算其到中心点的距离，并将其与距离最近的中心点关联起来，与同一个中心点关联的所有点聚成一类；</li></ol></li><li><ol><li>计算每一个组的平均值，并将中心点移动到平均值的位置；</li></ol></li><li><ol><li>重复2-3直至中心点不再变化。</li></ol></li></ul><p>给定样本集$D=\{x_1, x_2, \ldots,x_n\}$，K均值算法所得簇划分$C=\{C_1, \ldots, C_k\}$, 最小化平方误差为：</p><script type="math/tex; mode=display">E = \sum_{i=1}^k\sum_{x \in C_i}\|x-u_i\|^2</script><p>其中$u_i$为簇$C_i$的中心点。上式其实就是求样本数据中的每一点到其中心点的距离和。</p><h2 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h2><p>随机初始化就是用训练集中随机选择K个数据，作为K个聚类中心。</p><p>问题在于，最后的结果可能停留在一个局部最小值处。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200705160708.png" srcset="/img/loading.gif" alt=""></p><p>为了解决这一问题，需要多次运行K均值算法，每一次都要重新进行随机初始化，最后选择代价函数最小的结果。</p><h1 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h1><p>降维也是一种无监督学习问题，降维的动机有：数据压缩、数据可视化。</p><h2 id="主成分分析（Principal-Component-Analysis）"><a href="#主成分分析（Principal-Component-Analysis）" class="headerlink" title="主成分分析（Principal Component Analysis）"></a>主成分分析（Principal Component Analysis）</h2><p>主成分分析法是最常用的一种降维方法。在PCA中，要做的是找到一个方向向量，当把所有的数据都投射到该向量上，希望平均均方误差尽可能小。投射误差是指数据点到方向向量的垂直距离。</p><p>主成分分析与线性回归对比：</p><ul><li>主成分分析最小化的是投射误差；</li><li>线性回归最小化的是预测误差。</li></ul><p>将<code>n</code>维数据降到<code>k</code>维数据，样本集$D = \{x^{(1)},\ldots, x^{(m)}\}$，处理过程如下：</p><ol><li><p>对所有样本进行中心化：$x^{(i)} \leftarrow x^{(i)} - \frac {1}{m}\sum_{i = 1}^{m}x^{(i)}$;</p></li><li><p>计算协方差：$\Sigma = \frac{1}{m} \sum_{i = 1}^{m}x^{(i)}(x^{(i)})^T$, 所得结果为<code>n x n</code>大小；</p></li><li><p>计算协方差的特征向量, 记为$U = \begin{array}{1}[u^1, u^2, \ldots, u^n]\end{array}$；</p></li><li><p>选取前k个向量，获得一个<code>n x k</code>矩阵，记为$U_{reduce}$，然后获得降维的数据：$z^{(i)} = U_{reduce}^T \ast x^{(i)}$.</p></li></ol><h3 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h3><p>协方差在某种意义上给出了两个变量线性相关性的强度以及这些变量的出度：</p><script type="math/tex; mode=display">Cov(f(x), g(y)) = E[(f(x) - E[f(x)])\times (g(y) - E[g(y)]) ]</script><p>其中<code>E</code>表示求变量的均值。均方差的绝对值很大则意味着变量值变化很大，并且它们同时距离各自的均值很远。协方差和相关性是有联系的，如果两个变量相互独立，则协方差为0，但协方差为0，不表示一定相互独立。</p><p>协方差的对角元是方差：</p><script type="math/tex; mode=display">Cov(x_i, x_i) = Var(x_i)</script><p>在上述主成分分析中，求协方差是<strong>求不同特征之间的协方差, 而不是求不同样本之间的协方差</strong>。比如：$x^{(1)} = [x_{11},x_{21}]$, $x^{(2)} = [x_{12}, x_{22}]$, 即</p><script type="math/tex; mode=display">D = \begin{bmatrix}x_{11}&x_{12}\\x_{21}&x_{22}\end{bmatrix}</script><p>那么第一维的特征$x_1 = [x_{11}, x_{12}]$, 假设其均值为$\sigma_1$；第二维的特征$x_2 = [x_{21}, x_{22}]$，假设其均值为$\sigma_2$.那么</p><script type="math/tex; mode=display">Cov(x_1, x_2) = \frac{(x_{11} - \sigma_1)(x_{21} - \sigma_2) + (x_{12} - \sigma_1)(x_{22} - \sigma2)}{2}</script>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>无监督学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>支持向量机</title>
    <link href="/2020/07/04/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
    <url>/2020/07/04/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>支持向量机（Support Vector Machine）是类按监督学习方式对数据进行二分类的分类器，对多分类任务要进行专门的推广，其决策边界是对学习样本求解的最大间距超平面。SVM可以通过使用核方法进行非线性分类。</p><h1 id="最大间隔分类器"><a href="#最大间隔分类器" class="headerlink" title="最大间隔分类器"></a>最大间隔分类器</h1><p>对一个数据点进行分类，当超平面离数据点的间隔越大，分类的确信度越大。<br>在样本空间中，划分超平面可通过如下线性方程来描述：</p><script type="math/tex; mode=display">\omega ^ {T}x + b = 0 \tag{1}</script><p>样本空间中任意点x到超平面的距离为：</p><script type="math/tex; mode=display">r = \frac {|\omega^{T}x + b|}{\| \omega \|} \tag{2}</script><p>其中$| \omega |$ 为：</p><script type="math/tex; mode=display">\| \omega \| = \sqrt[2]{\omega_1^2 + \omega_2^2+\ldots+\omega_n^2} \tag{3}</script><p>使用+1和-1来标记样本的正负类。</p><ul><li>对于$y_i$ = +1，有 $\omega^Tx+b$ &gt; 0；</li><li>对于$y_i$ = −1，有$\omega^Tx+b$ &lt; 0.</li></ul><p>令：</p><script type="math/tex; mode=display">\left\{\begin{array}{ll}\boldsymbol{w}^{\mathrm{T}} \boldsymbol{x}_{i}+b \geqslant+1, & y_{i}=+1 \\\boldsymbol{w}^{\mathrm{T}} \boldsymbol{x}_{i}+b \leqslant-1, & y_{i}=-1\end{array}\right. \tag{4}</script><p>下图虚线上的点使上式等号成立，它们被称作“支持向量”。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200704221839.png" srcset="/img/loading.gif" alt=""></p><p>找到最大间隔的划分超平面，也就是下面的优化问题：</p><script type="math/tex; mode=display">\max \frac {2}{\|\omega\|},s.t. y_i(\omega^{T}x_i+b) \geq 1 \tag{5}</script><p>可以转化为如下问题：</p><script type="math/tex; mode=display">\min \frac {1}{2}\|\omega\|^2,s.t. y_i(\omega^{T}x_i+b) \geq 1 \tag{6}</script><h1 id="软间隔与正则化"><a href="#软间隔与正则化" class="headerlink" title="软间隔与正则化"></a>软间隔与正则化</h1><p>硬间隔是指所有样本都必须划分正确；软间隔则是允许某些样本不满足约束条件。优化目标改写为：</p><script type="math/tex; mode=display">\min_{\omega, b} \frac{1}{2}\|\omega\|^2 + C\sum_{i = 1}^{m}\ell_{0/1}(y_i(\omega^Tx_i + b) - 1) \tag{7}</script><p>其中C &gt; 0是一个常数，$\ell_{0/1}$ 是一个“0/1 损失函数”：</p><script type="math/tex; mode=display">\ell_{0/1} = \left\{\begin{array}{ll}1,if\ z < 0 \\0, otherwise\end{array}\right. \tag{8}</script><p>但该函数非凸、不连续，数学性质不好。常用以下三种替代损失函数：</p><ul><li>hinge损失：$\max(0, 1-z)$；</li><li>指数损失：$e^{-z}$;</li><li>对率损失：$\log(1 + e^{-z})$。</li></ul><p>若使用hinge损失，则式（7）变成：</p><script type="math/tex; mode=display">\min_{\omega, b} \frac{1}{2}\|\omega\|^2 + C\sum_{i = 1}^{m}\max(0, 1-y_i(\omega^Tx_i + b)) \tag{9}</script><p>但C不是很大的时候，它可以忽略一些异常点的影响，得到更好的决策边界。</p><ul><li>C较大时，可能会导致过拟合；</li><li>C较小时，可能会导致欠拟合。</li></ul><h1 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h1><p>如果原始样本空间内并不存在一个能正确划分两类样本的超平面，可以将原始样本空间映射到一个更高维的特征空间，使得样本在这个空间线性可分。使用核函数解决非线性分类问题，可以利用核函数计算新的特征，从而映射到更高维的特征空间。常用的核函数用：</p><p>线性核 ：$k(x_i, x_j) = x_i^Tx_j$ ；</p><p>高斯核 ：$k(x_i, x_j)=exp(-\frac{|x_i-x_j|^2}{2\sigma^2})$，其中$\sigma &gt;0$为高斯核的带宽；</p><p>拉普拉斯核：$k(x_i, x_j) = exp(-\frac{|x_i - x_j|}{\sigma})$，其中$\sigma &gt; 0$.</p><h2 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h2><p>从x的各个特征中预先选定三个landmarks $l^{(1)},l^{(2)},l^{(3)}$，则有：</p><script type="math/tex; mode=display">\begin{array}{l}f_1^{(1)} = k(x^{(1)}, l^{(1)})\\f_2^{(1)} = k(x^{(1)}, l^{(2)})\\ f_3^{(1)} = k(x^{(1)}, l^{(3)})\end{array} \tag{10}</script><p>其中$f_1^{(1)},f_2^{(1)},f_3^{(1)}$是利用核函数计算出来的关于$x^{(1)}$的新特征。以此类推可以计算$f^{(2)}, \ldots, f^{(n)}$.则决策边界可以表示为：</p><script type="math/tex; mode=display">\omega_0 + \omega_1 f_1 + \omega_2 f_2 + \omega_3 f_3 = 0 \tag{11}</script>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>监督学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux用户</title>
    <link href="/2020/07/04/Linux%E7%94%A8%E6%88%B7/"/>
    <url>/2020/07/04/Linux%E7%94%A8%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><h2 id="passwd文件"><a href="#passwd文件" class="headerlink" title="passwd文件"></a>passwd文件</h2><p>passwd文件位于<code>/etc/passwd</code>, 各字段含义如下：</p><ul><li>1、账户名称：用来对应UID</li><li>2、密码：早起Unix系统的密码就是防止这个字段上，但是英文这个档案的特性是所有程序都能读取，容易造成密码数据被窃取应此后来就将这个字段的密码数据放到了/etc/shadow中了，所以这里使用【X】，</li><li>3、UID：用户ID，当UID为0时，用户拥有root权限，但该用户不一定是root；1-499保留给系统使用的ID；500~ ，一般使用者。</li><li>4、GID：这个与/etc/group有关！其实/etc/group的观念与/etc/passwd差不多，应用来规范组名</li><li>5、用户信息说明栏：</li><li>6、家目录：root的家目录在/root，所以当root登陆的之后，就会立刻跑到/root目录里头，如果坏、这个账号需要使用特别大的空间，就可以对这个字段进行修改，已移动到其他同硬盘。默认的用户家目录在/home/youIdname, home目录即<code>~</code>。</li><li>7、Shell:定义用户登陆系统使用什么shell，这里需要注意，有一个shell可以用来特带成让账户无法取得shell环境的登陆动作！那就是/sbin/nologin这个特殊东西，也可以用来制作pop邮件账号者的数据。<div class="hljs"><pre><code class="hljs undefined"><span class="hljs-symbol">:/etc</span><span class="hljs-variable">$ </span>cat /etc/passwd<span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><span class="hljs-symbol">xinger:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:</span>,,,<span class="hljs-symbol">:/home/xinger</span><span class="hljs-symbol">:/bin/bash</span><span class="hljs-symbol">mongodb:</span><span class="hljs-symbol">x:</span><span class="hljs-number">111</span><span class="hljs-symbol">:</span><span class="hljs-number">116</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/var/lib/mongodb</span><span class="hljs-symbol">:/usr/sbin/nologin</span><span class="hljs-symbol">redis:</span><span class="hljs-symbol">x:</span><span class="hljs-number">112</span><span class="hljs-symbol">:</span><span class="hljs-number">117</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/var/lib/redis</span><span class="hljs-symbol">:/usr/sbin/nologin</span></code></pre></div></li></ul><h3 id="禁止用户shell登录权限"><a href="#禁止用户shell登录权限" class="headerlink" title="禁止用户shell登录权限"></a>禁止用户shell登录权限</h3><p>比如禁止git用户shell登录权限</p><div class="hljs"><pre><code class="hljs undefined">- <span class="hljs-symbol">git:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span>,,,<span class="hljs-symbol">:/home/git</span><span class="hljs-symbol">:/bin/bash</span><span class="hljs-comment"># 修改成如下</span>+ <span class="hljs-symbol">git:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span><span class="hljs-number">1001</span><span class="hljs-symbol">:</span>,,,<span class="hljs-symbol">:/home/git</span><span class="hljs-symbol">:/usr/bin/git-shell</span></code></pre></div><h2 id="用户相关操作"><a href="#用户相关操作" class="headerlink" title="用户相关操作"></a>用户相关操作</h2><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><p>有以下两种方式：<br><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-keyword">adduser </span>username<span class="hljs-symbol">useradd</span> username</code></pre></div></p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>对应不同的创建有不同的删除方式：<br><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attribute">deluser usernameuserdel username</span></code></pre></div></p><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attribute">su username</span></code></pre></div><h3 id="改变文件用户"><a href="#改变文件用户" class="headerlink" title="改变文件用户"></a>改变文件用户</h3><div class="hljs"><pre><code class="hljs undefined">chown -R username <span class="hljs-keyword">dir </span><span class="hljs-comment"># 用户</span>chgrp -R grpname <span class="hljs-keyword">dir </span><span class="hljs-comment"># 用户组</span></code></pre></div><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attribute">passwd</span> username <span class="hljs-comment"># 修改密码</span>passwd username -d <span class="hljs-comment"># 删除密码</span></code></pre></div><h2 id="etc-sudoers文件"><a href="#etc-sudoers文件" class="headerlink" title="/etc/sudoers文件"></a>/etc/sudoers文件</h2><p>修改sudoers文件让用户获得sudo的使用权, 避免出现如下错误：</p><blockquote><p>xinger is not in the sudoers file.  This incident will be reported.</p></blockquote><p>比如创建了一个git用户，sudoers文件中添加<code>git   ALL=(ALL) ALL</code>让git用户获得sudo使用权。<br><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-comment"># User privilege specification</span><span class="hljs-attribute">root</span>    <span class="hljs-literal">ALL</span>=(<span class="hljs-literal">ALL</span>:<span class="hljs-literal">ALL</span>) <span class="hljs-literal">ALL</span><span class="hljs-comment"># </span><span class="hljs-attribute">git</span>     <span class="hljs-literal">ALL</span>=(<span class="hljs-literal">ALL</span>) <span class="hljs-literal">ALL</span></code></pre></div></p><ul><li>第一个ALL是指网络中的主机，我们后面把它改成了主机名，它指明jack可以在此主机上执行后面的命令。</li><li>第二个括号里的ALL是指目标用户，也就是以谁的身份去执行命令。</li><li>最后一个ALL当然就是指命令名了。</li></ul><p>修改sudoers文件需要修改文件的读写权限, 注意要在在修改后将权限改回：<br><div class="hljs"><pre><code class="hljs undefined">sudo chmod +<span class="hljs-number">777</span> <span class="hljs-regexp">/etc/</span>sudoers<span class="hljs-comment"># 修改后将权限改回</span>sudo chmod <span class="hljs-number">440</span> <span class="hljs-regexp">/etc/</span>sudoers</code></pre></div></p><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><ul><li>Linux文件的权限类型一般包括读、写、执行，对应字母为r、w、x，对应数字为4、2、1。对于一个文件夹而言，可写就意味着可以在这个文件夹下创建文件或文件夹；</li><li>Linux下权限的粒度分为拥有者、群组、其他组三种；</li><li>使用<code>chmod</code>命令修改文件权限，使用<code>chown</code>修改拥有者或群组，使用<code>chgrp</code>修改群组。</li><li>chown：一般来说，这个指令只有是由系统管理者(root)所使用，一般使用者没有权限可以改变别人的文件拥有者，也没有权限把自己的文件拥有者改设为别人。只有系统管理者(root)才有这样的权限。</li></ul><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><h3 id="一般使用"><a href="#一般使用" class="headerlink" title="一般使用"></a>一般使用</h3><div class="hljs"><pre><code class="hljs shell">chmod [ugoa] [[+-=][rwx]]其中：[ugoa] u表示拥有者，g表示拥有群组，o表示其他，a表示全部[+-=] + 表示增加权限，- 表示取消权限，= 表示唯一设定权限。[rwxX] r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。</code></pre></div><h3 id="数字权限"><a href="#数字权限" class="headerlink" title="数字权限"></a>数字权限</h3><p>r = 4, w = 2, x = 1.</p><ul><li><p>rwx则表示为：4 + 2 + 1 = 7；</p></li><li><p>r—则表示为：4 + 0 + 0 = 4；</p></li></ul><p>如果设置所有人都有rwx权限, 则用数字表示的权限为777，使用如下命令更改权限：</p><div class="hljs"><pre><code class="hljs undefined">chmod <span class="hljs-number">777</span> <span class="hljs-built_in">file</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习基础</title>
    <link href="/2020/07/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/07/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-监督学习和非监督学习"><a href="#1-监督学习和非监督学习" class="headerlink" title="1. 监督学习和非监督学习"></a>1. 监督学习和非监督学习</h1><h2 id="1-1-监督学习"><a href="#1-1-监督学习" class="headerlink" title="1.1 监督学习"></a>1.1 监督学习</h2><p>定义：监督学习中，训练的数据集中既有特征（feature）又有标签（label），通过训练，可以让机器找到特征与标签之间的联系。</p><p><strong>ground truth：</strong>监督学习中，数据正确的标注即为ground truth。</p><p>监督学习分为回归（Regression）、分类（Classification）</p><h3 id="1-1-1-回归"><a href="#1-1-1-回归" class="headerlink" title="1.1.1 回归"></a>1.1.1 回归</h3><p>回归问题是针对连续型变量的。</p><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><h5 id="（1）单变量线性回归"><a href="#（1）单变量线性回归" class="headerlink" title="（1）单变量线性回归"></a>（1）单变量线性回归</h5><p>单变量线性回归只给出一个特征，比如预测房屋价格问题，样本中只给出房屋尺寸这一个特征，通过回归算法，找出房价与房屋尺寸的线性关系。</p><script type="math/tex; mode=display">h_{\theta}(x) = {\theta}_{0} + {\theta}_{1} x</script><h5 id="（2）多变量线性回归"><a href="#（2）多变量线性回归" class="headerlink" title="（2）多变量线性回归"></a>（2）多变量线性回归</h5><p>多变量线性回归提供多个特征。比如预测房屋价格，给出房屋尺寸、房屋楼层等特征。<br>代价函数：</p><script type="math/tex; mode=display">J({\theta}_0, {\theta}_1, \ldots, {\theta}_n) = \frac {1}{2m} {\sum}_{i=1}^{m}(h_{\theta}(x^{(i)}) - y^{(i)})^2</script><p>其中：</p><script type="math/tex; mode=display">h_{\theta}(x) = {\theta}_0 + {\theta}_{1}x + ··· + {\theta}_{n}x</script><h4 id="逻辑回归（Logistics-Regression）"><a href="#逻辑回归（Logistics-Regression）" class="headerlink" title="逻辑回归（Logistics Regression）"></a>逻辑回归（Logistics Regression）</h4><p>适用于二分类问题，逻辑回归的输出是如下形式：</p><script type="math/tex; mode=display">a = \sigma(\omega^{T}x + b)</script><p>$\sigma()$是指<code>sigmoid</code>函数：</p><script type="math/tex; mode=display">\sigma(x) = \frac{1}{1 + e^{-x}}</script><p>使用<code>sigmoid</code>函数将线性函数转变成非线性，这也就是逻辑回归与线性回归的根本区别所在。</p><p>逻辑回归使用二分类交叉熵函数作为代价函数，使用梯度下降法进行优化。</p><h3 id="1-1-2-分类"><a href="#1-1-2-分类" class="headerlink" title="1.1.2 分类"></a>1.1.2 分类</h3><p>分类是针对离散型变量的。</p><h2 id="1-2-无监督学习"><a href="#1-2-无监督学习" class="headerlink" title="1.2 无监督学习"></a>1.2 无监督学习</h2><p>定义：训练数据集中没有标签，与监督学习相比更像是自学。</p><h1 id="2-代价函数"><a href="#2-代价函数" class="headerlink" title="2. 代价函数"></a>2. 代价函数</h1><p>机器学习中，训练模型的过程就是优化代价函数的过程。一个好的代价函数需要满足两个基本的要求：</p><ul><li>能够评价模型的准确性；</li><li>对参数可微。</li></ul><p>代价函数与损失函数的区别：损失函数是计算单个样本的损失值，而代价函数是计算总代价。</p><h2 id="2-1-均方误差"><a href="#2-1-均方误差" class="headerlink" title="2.1 均方误差"></a>2.1 均方误差</h2><p>线性回归中，常使用均方误差（Mean squared error）作为代价函数。</p><script type="math/tex; mode=display">J({\theta}_0, {\theta}_1, \ldots, {\theta}_n) = \frac {1}{2m} {\sum}_{i=1}^{m}(h_{\theta}(x^{(i)}) - y^{(i)})^2</script><h2 id="2-2-交叉熵"><a href="#2-2-交叉熵" class="headerlink" title="2.2 交叉熵"></a>2.2 交叉熵</h2><p>交叉熵代价函数常常用于分类问题，分类问题又分为二分类和多分类。</p><h3 id="二分类"><a href="#二分类" class="headerlink" title="二分类"></a>二分类</h3><p>逻辑回归是一个典型的二分类模型，使用如下代价函数进行参数优化。</p><script type="math/tex; mode=display">J({y}, {a}) = - \frac{1}{m}{\sum}_{i=1}^{m}(y^{(i)}\log(a^{(i)}) + (1-y^{(i)})\log(1-a^{(i)}))</script><p>其中y是指实际结果，a是指预期结果。</p><h3 id="多分类"><a href="#多分类" class="headerlink" title="多分类"></a>多分类</h3><script type="math/tex; mode=display">J(y, a) = - \frac{1}{m} \sum_{i=1}^{m}y^{(i)}\log(a^{(i)})</script><p>手写数字识别是一个多分类问题（识别0-9共10种数字），可以对labels进行one-hot编码，one-hot编码是指正确解的标签为1，其余为0，比如一个手写数字样本标签为3，则编码表示为$[0,0,0, 1, 0, 0, 0, 0, 0, 0]$, 如果计算的预期结果为$[2.2, 3.1, 1.2, 4.4, 0.1, 0.9, 3.5, 0.5, 0.9, 0.1]$，则单个样本的损失值为$-log(4.4)$</p><h1 id="3-神经网络"><a href="#3-神经网络" class="headerlink" title="3. 神经网络"></a>3. 神经网络</h1><p>训练神经网络的过程：</p><p>1） 参数的随机初始化；</p><p>2） 正向传播；</p><p>3） 计算代价；</p><p>4）反向传播计算所有偏导数；</p><p>5） 利用数值检验方法检验这些偏导数；</p><p>6）使用优化来最小化代价函数。</p><h2 id="3-1-随机初始化"><a href="#3-1-随机初始化" class="headerlink" title="3.1 随机初始化"></a>3.1 随机初始化</h2><p>参数初始化一般采用随机初始化，而不应该将所有参数都初始化为0，对于逻辑回归来说，全部初始化为0是可行的，因为逻辑回归是一层的神经网络，且只有一个神经元。对于复杂的神经网络来说，如果参数全部初始化为0，则对于同一层的所有神经元而言，其计算结果都是一样的，反向传播求的梯度也是一样的。</p><h2 id="3-2-反向传播"><a href="#3-2-反向传播" class="headerlink" title="3.2 反向传播"></a>3.2 反向传播</h2><p><strong>反向传播</strong>（Back Propagation）是“误差反向传播”的简称，是一种与<a href="https://zh.wikipedia.org/wiki/最优化" target="_blank" rel="noopener">最优化方法</a>（如<a href="https://zh.wikipedia.org/wiki/梯度下降法" target="_blank" rel="noopener">梯度下降法</a>）结合使用的，用来训练<a href="https://zh.wikipedia.org/wiki/人工神经网络" target="_blank" rel="noopener">人工神经网络</a>的常见方法。该方法使用链式法则对网络中所有权重计算损失函数的梯度。这个梯度会反馈给最优化方法，用来更新权值以最小化损失函数。</p><p>反向传播算法（BP 算法）主要由两个阶段组成：激励传播与权重更新。</p><h3 id="第1阶段：激励传播"><a href="#第1阶段：激励传播" class="headerlink" title="第1阶段：激励传播"></a>第1阶段：激励传播</h3><p>每次迭代中的传播环节包含两步：</p><ol><li>（前向传播阶段）将训练输入送入网络以获得激励响应；</li><li>（反向传播阶段）将激励响应同训练输入对应的目标输出求差，从而获得输出层和隐藏层的响应误差。</li></ol><h3 id="第2阶段：权重更新"><a href="#第2阶段：权重更新" class="headerlink" title="第2阶段：权重更新"></a>第2阶段：权重更新</h3><p>对于每个突触上的权重，按照以下步骤进行更新：</p><ol><li>将输入激励和响应误差相乘，从而获得权重的梯度；</li><li>将这个梯度乘上一个比例并取反后加到权重上。</li></ol><p>这个比例（百分比）将会影响到训练过程的速度和效果，因此成为<strong>“学习率”</strong>。梯度的方向指明了误差扩大的方向，因此在更新权重的时候需要对其取反，从而减小权重引起的误差。</p><p>第 1 和第 2 阶段可以反复循环迭代，直到网络对输入的响应达到满意的预定的目标范围为止。</p><h2 id="3-3-梯度检验"><a href="#3-3-梯度检验" class="headerlink" title="3.3 梯度检验"></a>3.3 梯度检验</h2><p>通过估计梯度值来检验计算得到的导数值是否是正确的。下面对$\theta_1$进行检验：</p><script type="math/tex; mode=display">\frac {\partial {J}}{\partial \theta_1} = \frac {J(\theta_1+\epsilon, \theta_2,\ldots, \theta_n)-J(\theta_1-\epsilon, \theta_2,\ldots, \theta_n)}{2\epsilon}</script><p>其中$\epsilon$是一个非常小的常量。将上式计算得到的梯度与反向传播的梯度进行比较，若相差很小，则梯度是正确的。</p><h1 id="4-应用机器学习的建议"><a href="#4-应用机器学习的建议" class="headerlink" title="4. 应用机器学习的建议"></a>4. 应用机器学习的建议</h1><h2 id="4-1-模型选择"><a href="#4-1-模型选择" class="headerlink" title="4.1 模型选择"></a>4.1 模型选择</h2><p>使用<strong>验证集</strong>来选择模型，验证集并不参与学习参数的确定，而是用来选择超参数，比如多项式次数、网络层数、网络节点数、迭代次数、学习率等。</p><ul><li>训练集：用来训练模型内的参数的数据集；</li><li>验证集：验证集集是从训练集中取出来的一部分，用来选择模型，超参数调优；</li><li>测试集：用来评价模型泛化能力。训练过程不能使用测试集。</li></ul><p><strong>注意</strong>：绝对不能使用测试集用来调优，测试集只能在训练完成后评价最终模型时使用。如果使用测试集进行调优，测试结果可能不错，可实际性能会远低于预期，这种情况称之为对测试集过拟合。</p><h3 id="数据划分"><a href="#数据划分" class="headerlink" title="数据划分"></a>数据划分</h3><p>数据量较小（传统机器学习）</p><ul><li>没有验证集，训练集：测试集=7：3</li><li>有验证集，训练集：验证集：测试集=6：2：2</li></ul><p>数据量较大，比如100万条数据：</p><ul><li>训练集：验证集：测试集 = 98: 1: 1<h3 id="交叉验证（cross-validation）"><a href="#交叉验证（cross-validation）" class="headerlink" title="交叉验证（cross validation）"></a>交叉验证（cross validation）</h3></li></ul><p>交叉验证的做法就是先将数据集分出一个测试集，然后将剩下的数据分为比较均等不相交的k份，然后选择其中一份验证，另外的k-1份进行训练，最后求得error的平均值作为最终的评价。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200703174015.png" srcset="/img/loading.gif" alt=""></p><h1 id="5-过拟合与欠拟合"><a href="#5-过拟合与欠拟合" class="headerlink" title="5. 过拟合与欠拟合"></a>5. 过拟合与欠拟合</h1><p><strong>过拟合（Over-Fitting）</strong></p><p>在训练集上误差小，但在测试集上误差大，我们将这种情况称为高方差（high variance）</p><p><strong>欠拟合（Under-Fitting）</strong></p><p>在训练集上训练结果不好，准确率不高，我们将这种情况称为高偏差（high bias), 也叫欠拟合。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200702165139.png" srcset="/img/loading.gif" alt=""></p><h2 id="5-1-偏差与方差"><a href="#5-1-偏差与方差" class="headerlink" title="5.1 偏差与方差"></a>5.1 偏差与方差</h2><p><strong>偏差：</strong>描述的是预测值（估计值）的期望与真实值之间的差距。偏差越大，越偏离真实数据，如下图第二行所示。</p><p><strong>方差：</strong>描述的是预测值的变化范围，离散程度，也就是离其期望值的距离。方差越大，数据的分布越分散，如下图右列所示。</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200702170430.png" srcset="/img/loading.gif" alt=""></p><p>通过将训练集和交叉验证集的代价函数误差与多项式的次数绘制在一张图表上分析偏差和方差问题。</p><ul><li>训练集误差较大，且验证集误差与训练集误差相近：高偏差；</li><li>验证集误差远大于训练集误差：高方差。</li></ul><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200703175526.png" srcset="/img/loading.gif" alt=""></p><h2 id="5-2-如何防止过拟合"><a href="#5-2-如何防止过拟合" class="headerlink" title="5.2 如何防止过拟合"></a>5.2 如何防止过拟合</h2><ul><li>增加数据集</li><li>减少不能帮助正确预测的特征</li><li>正则化，增加正则化程度 $\lambda$</li><li>Dropout(随机失活)</li><li>Early Stopping</li><li>简化模型</li><li>增加噪声</li><li>Bagging</li><li>贝叶斯方法</li><li>决策树剪枝</li><li>集成方法，随机森林</li><li>Batch Normalization</li></ul><h3 id="5-2-1-正则化"><a href="#5-2-1-正则化" class="headerlink" title="5.2.1 正则化"></a>5.2.1 正则化</h3><p>正则化就是对最小化经验误差函数上加约束，正则化项一般是模型复杂度的单调递增函数，模型越复杂，正则化值就越大。比如，正则化项可以是模型参数向量的范数。</p><h4 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h4><p>$l_p$范数定义为：    </p><script type="math/tex; mode=display">\|{x}\|_{p}=\sqrt[p]{\sum_{i}\left|x_{i}\right|^{p}}</script><p>其中$x$ 表示一个向量。</p><h5 id="l-0-范数"><a href="#l-0-范数" class="headerlink" title="$l_0$范数"></a>$l_0$范数</h5><p>$l_0$范数表示向量中非0元素的个数，其优化模型是一个NP难问题，难以求解。</p><h5 id="l-1-范数"><a href="#l-1-范数" class="headerlink" title="$l_1$范数"></a>$l_1$范数</h5><p>$l_1$范数等于向量中所有哦元素绝对值之和。</p><script type="math/tex; mode=display">\|{x}\|_{1}=\sum_{i}|x_{i}|</script><h5 id="l-2-范数"><a href="#l-2-范数" class="headerlink" title="$l_2$范数"></a>$l_2$范数</h5><p>$l_2$范数即欧氏距离。</p><script type="math/tex; mode=display">\|{x}\|_{2}=\sqrt[2]{\sum_{i}\left|x_{i}\right|^{2}}</script><h4 id="L-1-和-L-2-正则化"><a href="#L-1-和-L-2-正则化" class="headerlink" title="$L_1$和$L_2$正则化"></a>$L_1$和$L_2$正则化</h4><p>$L_1$正则化：正则化项是参数向量的$L_1$范数。</p><script type="math/tex; mode=display">J(\omega, b) = \frac{1}{m} \sum_{i=1}^{m}L(y,a) + \frac {\lambda} {m} \sum \omega</script><p>$L_2$正则化：正则化项是参数向量的$L_2$范数的平方。</p><script type="math/tex; mode=display">J(\omega, b) = \frac{1}{m} \sum_{i=1}^{m}L(y,a) + \frac {\lambda} {2m} \sum \omega ^2</script><p>注意：可以不正则化参数$b$，$\frac{\lambda}{2m}$只是一个常数项，除以2是为了后面求导方便。</p><p><strong>为什么L2正则化可以防止过拟合？</strong></p><blockquote><p>L2正则化可以直观理解为它对于大数值的权重向量进行严厉惩罚，倾向于更加分散的权重向量。由于输入和权重之间的乘法操作，这样就有了一个优良的特性：<strong>使网络更倾向于使用所有输入特征，而不是严重依赖输入特征中某些小部分特征。</strong> <strong>L2惩罚倾向于更小更分散的权重向量，这就会鼓励分类器最终将所有维度上的特征都用起来，而不是强烈依赖其中少数几个维度。</strong>。这样做可以提高模型的泛化能力，降低过拟合的风险。</p></blockquote><h3 id="5-2-2-Dropout（随机失活）"><a href="#5-2-2-Dropout（随机失活）" class="headerlink" title="5.2.2 Dropout（随机失活）"></a>5.2.2 Dropout（随机失活）</h3><p>dropout会遍历网络中的每一层，并设置消除神经元节点的概率，消除的本质就是让该节点的值变为0. 这种方式可以减少特征检测器间的相互作用，明显减少过拟合现象。Dropout被大量用于全连接网络，但在卷积神经网络中使用较少。</p><p>如下GIF所示，网络的第二层随机删除节点，设置keep_prob = 0.5，其中keep_prob表示保留某个隐藏神经元的概率.</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20180408162931222.gif" srcset="/img/loading.gif" alt=""></p><h4 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h4><div class="hljs"><pre><code class="hljs python">D1 = np.random.rand(A1.shape[<span class="hljs-number">0</span>],A1.shape[<span class="hljs-number">1</span>])     D1 = D1 &lt; keep_prob<span class="hljs-comment"># 步骤2：将D1的值转换为0或1（使用keep_prob作为阈值）</span>A1 = A1 * D1        <span class="hljs-comment"># 步骤3：舍弃A1的一些节点（将它的值变为0或False）</span>A1 = A1 / keep_prob<span class="hljs-comment"># 进行缩放，使A1的期望值没有太大变化</span></code></pre></div><p>反向传播时：</p><div class="hljs"><pre><code class="hljs python">dA1 = dA1 * D1 / keep_prob</code></pre></div><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><strong>1. 为什么能防止过拟合？</strong></p><p>每个参数都有可能被随机的Drop掉，所以参数不会过分的依赖某一个特征的数据，而且不同参数之间的相互关联性也大大减弱，这些操作都可以增加泛化能力。</p><p><strong>2. 训练和测试有什么不同？</strong></p><p>测试时，所有神经元都要保留下来，乘上系数<code>keep_prob</code>。</p><h2 id="5-3-如何防止欠拟合"><a href="#5-3-如何防止欠拟合" class="headerlink" title="5.3 如何防止欠拟合"></a>5.3 如何防止欠拟合</h2><ul><li>添加新特征</li><li>添加多项式特征</li><li>减少正则化参数, 减少正则化程度 $\lambda$</li><li>增加网络复杂度</li><li>使用集成学习方法，如Bagging</li></ul><h1 id="6-符号约定"><a href="#6-符号约定" class="headerlink" title="6. 符号约定"></a>6. 符号约定</h1><h2 id="数据标记与上下标"><a href="#数据标记与上下标" class="headerlink" title="数据标记与上下标"></a>数据标记与上下标</h2><ul><li>上标： $^{(i)}$ 表示第i个样本；</li><li>上标：$^{[i]}$ 代表第i层；</li><li>m: 数据集的样本数； </li></ul>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX数学公式</title>
    <link href="/2020/07/03/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <url>/2020/07/03/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h2><div class="table-container"><table><thead><tr><th>符号</th><th>示例</th><th>显示</th></tr></thead><tbody><tr><td>偏导</td><td>\partial y</td><td>$\partial y$</td></tr><tr><td>上下标</td><td>S=a_{1}^2+a_{2}^2+a_{3}^2</td><td>$S=a_{1}^2+a_{2}^2+a_{3}^2$</td></tr><tr><td>分数</td><td>\frac{1}{3}</td><td>$\frac{1}{3}$</td></tr><tr><td>开方</td><td>\sqrt[3]{X}</td><td>$\sqrt[3]{X}$</td></tr><tr><td></td><td>\bar x</td><td>$\bar x$</td></tr><tr><td>求导</td><td>\mathrm{d}y</td><td>$\mathrm{d}y$</td></tr><tr><td>向量</td><td>\vec x</td><td>$\vec{x}$</td></tr><tr><td>X帽</td><td>\hat X 或者\widehat X</td><td>$\hat X$ 或者$\widehat X$或者$\tilde{X}$</td></tr><tr><td>大括号</td><td><code>\left\{\begin{array}{l}1\\0\end{array}\right.</code>，用法：<code>\begin{array}[{垂直对齐}]{（列格式说明）} &lt;表项&gt; &amp; &lt;表项&gt; &amp;...&amp; \\ \end{array}</code>, 列格式说明有：l（左对齐）、r（右对齐）、c（中间对齐）三种</td><td>$\left\{\begin{array}{l}1\\0\end{array}\right.$</td></tr><tr><td>矩阵</td><td>pmatrix, bmatrix</td><td>$\begin{pmatrix}1&amp;1\\ 1&amp;1 \end{pmatrix}$</td></tr><tr><td></td><td>^{\circ}</td><td>$45^{\circ}$</td></tr></tbody></table></div><h2 id="其他字符"><a href="#其他字符" class="headerlink" title="其他字符"></a>其他字符</h2><h3 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h3><div class="table-container"><table><thead><tr><th>代码</th><th>符号</th></tr></thead><tbody><tr><td>\uparrow</td><td>$\uparrow$</td></tr><tr><td>\Uparrow</td><td>$\Uparrow$</td></tr><tr><td>\leftarrow</td><td>$\leftarrow$</td></tr><tr><td>\longleftarrow</td><td>$\longleftarrow$</td></tr><tr><td>X \stackrel{F} \rightarrow Y</td><td>$X \stackrel{F} \rightarrow Y$</td></tr></tbody></table></div><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><div class="table-container"><table><thead><tr><th>代码</th><th>符号</th></tr></thead><tbody><tr><td>\pm</td><td>$\pm$</td></tr><tr><td>\times</td><td>$\times$</td></tr><tr><td>\div</td><td>$\div$</td></tr><tr><td>\mid</td><td>$\mid$</td></tr><tr><td>\nmid</td><td>$\nmid$</td></tr><tr><td>\cdot</td><td>$\cdot$</td></tr><tr><td>\ldots</td><td>$\ldots$</td></tr><tr><td>\circ</td><td>$\circ$</td></tr><tr><td>\ast</td><td>$\ast$</td></tr><tr><td>\bigodot</td><td>$\bigodot$</td></tr><tr><td>\bigotimes</td><td>$\bigotimes$</td></tr><tr><td>\bigoplus</td><td>$\bigoplus$</td></tr><tr><td>\leq</td><td>$\leq$</td></tr><tr><td>\geq</td><td>$\geq$</td></tr><tr><td>\neq</td><td>$\neq$</td></tr><tr><td>\approx</td><td>$\approx$</td></tr><tr><td>\equiv</td><td>$\equiv$</td></tr><tr><td>\sum</td><td>$\sum$</td></tr><tr><td>\prod</td><td>$\prod$</td></tr></tbody></table></div><h3 id="微积分运算符"><a href="#微积分运算符" class="headerlink" title="微积分运算符"></a>微积分运算符</h3><div class="table-container"><table><thead><tr><th>代码</th><th>符号</th></tr></thead><tbody><tr><td>\prime</td><td>$\prime$</td></tr><tr><td>\int</td><td>$\int$</td></tr><tr><td>\iint</td><td>$\iint$</td></tr><tr><td>\iiint</td><td>$\iiint$</td></tr><tr><td>\oint</td><td>$\oint$</td></tr><tr><td>\lim</td><td>$\lim$</td></tr><tr><td>\infty</td><td>$\infty$</td></tr><tr><td>\nabla</td><td>$\nabla$</td></tr><tr><td>\mathrm{d}</td><td>$\mathrm{d}$</td></tr></tbody></table></div><h3 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h3><div class="table-container"><table><thead><tr><th>代码</th><th>符号</th></tr></thead><tbody><tr><td>\emptyset</td><td>$\emptyset$</td></tr><tr><td>\in</td><td>$\in$</td></tr><tr><td>\notin</td><td>$\notin$</td></tr><tr><td>\subset</td><td>$\subset$</td></tr><tr><td>\cap</td><td>$\cap$</td></tr><tr><td>\subseteq</td><td>$\subseteq$</td></tr><tr><td>\cup</td><td>$\cup$</td></tr><tr><td>\supseteq</td><td>$\supseteq$</td></tr></tbody></table></div><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><div class="table-container"><table><thead><tr><th>代码</th><th>大写</th><th>代码</th><th>小写</th></tr></thead><tbody><tr><td>A</td><td>$A$</td><td>\alpha</td><td>$\alpha$</td></tr><tr><td>B</td><td>$B$</td><td>\beta</td><td>$\beta$</td></tr><tr><td>\Gamma</td><td>$\Gamma$</td><td>\gamma</td><td>$\gamma$</td></tr><tr><td>\Delta</td><td>$\Delta$</td><td>\delta</td><td>$\delta$</td></tr><tr><td>E</td><td>$E$</td><td>\epsilon</td><td>$\epsilon$</td></tr><tr><td>Z</td><td>$Z$</td><td>\zeta</td><td>$\zeta$</td></tr><tr><td>H</td><td>$H$</td><td>\eta</td><td>$\eta$</td></tr><tr><td>\Theta</td><td>$\Theta$</td><td>\theta</td><td>$\theta$</td></tr><tr><td>I</td><td>$I$</td><td>\iota</td><td>$\iota$</td></tr><tr><td>K</td><td>$K$</td><td>\kappa</td><td>$\kappa$</td></tr><tr><td>Lambda</td><td>$\Lambda$</td><td>\lambda</td><td>$\lambda$</td></tr><tr><td>M</td><td>$M$</td><td>\mu</td><td>$\mu$</td></tr><tr><td>N</td><td>$N$</td><td>\nu</td><td>$\nu$</td></tr><tr><td>Xi</td><td>$Xi$</td><td>\xi</td><td>$\xi$</td></tr><tr><td>O</td><td>$O$</td><td>\omicron</td><td>$\omicron$</td></tr><tr><td>\Pi</td><td>$\Pi$</td><td>\pi</td><td>$\pi$</td></tr><tr><td>P</td><td>$P$</td><td>\rho</td><td>$\rho$</td></tr><tr><td>\Sigma</td><td>$\Sigma$</td><td>\sigma</td><td>$\sigma$</td></tr><tr><td>T</td><td>$T$</td><td>\tau</td><td>$\tau$</td></tr><tr><td>\Upsilon</td><td>$\Upsilon$</td><td>\upsilon</td><td>$\upsilon$</td></tr><tr><td>\Phi</td><td>$\Phi$</td><td>\phi</td><td>$\phi$</td></tr><tr><td>X</td><td>$X$</td><td>\chi</td><td>$\chi$</td></tr><tr><td>\Psi</td><td>$\Psi$</td><td>\psi</td><td>$\psi$</td></tr><tr><td>\Omega</td><td>$\Omega$</td><td>\omega</td><td>$\omega$</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>LaTeX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写数字识别</title>
    <link href="/2020/07/02/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <url>/2020/07/02/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>手写数字识别需要完成识别0-9这10类数字的任务，数据集使用的是MNIST（<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">下载链接</a>）。</p><h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><p>如下图所示，构建了一个3层的神经网络（不包括输入层），第一个隐藏层包括128个神经元，第二个隐藏层包括64个神经元，输出层包括10个神经元。隐藏层中每个神经元进行两项运算：先进行线性运算，然后使用<code>tanh</code>激励函数；输出层也是先进行线性运算，但激励函数使用的是<code>softmax</code>。</p><p><img src="http://image.ningxin.site/神经网络模型图.png" srcset="/img/loading.gif" alt="网络结构图" style="zoom: 67%;"></p><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>使用MNIST数据集，都是<code>28 x 28</code>大小的图片，一共有60000个训练样本和10000个测试样本。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> struct<span class="hljs-comment"># 训练集文件</span>train_images_idx3_ubyte_file = <span class="hljs-string">'data/MNIST/raw/train-images-idx3-ubyte'</span><span class="hljs-comment"># 训练集标签文件</span>train_labels_idx1_ubyte_file = <span class="hljs-string">'data/MNIST/raw/train-labels-idx1-ubyte'</span><span class="hljs-comment"># 测试集文件</span>test_images_idx3_ubyte_file = <span class="hljs-string">'data/MNIST/raw/t10k-images-idx3-ubyte'</span><span class="hljs-comment"># 测试集标签文件</span>test_labels_idx1_ubyte_file = <span class="hljs-string">'data/MNIST/raw/t10k-labels-idx1-ubyte'</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode_idx3_ubyte</span><span class="hljs-params">(idx3_ubyte_file)</span>:</span>    <span class="hljs-string">"""    解析idx3文件的通用函数    :param idx3_ubyte_file: idx3文件路径    :return: 数据集    """</span>    <span class="hljs-comment"># 读取二进制数据</span>    bin_data = open(idx3_ubyte_file, <span class="hljs-string">'rb'</span>).read()    <span class="hljs-comment"># 解析文件头信息，依次为魔数、图片数量、每张图片高、每张图片宽</span>    offset = <span class="hljs-number">0</span>    fmt_header = <span class="hljs-string">'&gt;iiii'</span>  <span class="hljs-comment"># 因为数据结构中前4行的数据类型都是32位整型，所以采用i格式，但我们需要读取前4行数据，所以需要4个i。我们后面会看到标签集中，只使用2个ii。</span>    magic_number, num_images, num_rows, num_cols = struct.unpack_from(fmt_header, bin_data, offset)    <span class="hljs-comment"># print('魔数:%d, 图片数量: %d张, 图片大小: %d*%d' % (magic_number, num_images, num_rows, num_cols))</span>    <span class="hljs-comment"># 解析数据集</span>    image_size = num_rows * num_cols    offset += struct.calcsize(fmt_header)  <span class="hljs-comment"># 获得数据在缓存中的指针位置，从前面介绍的数据结构可以看出，读取了前4行之后，指针位置（即偏移位置offset）指向0016。</span>    print(offset)    fmt_image = <span class="hljs-string">'&gt;'</span> + str(        image_size) + <span class="hljs-string">'B'</span>  <span class="hljs-comment"># 图像数据像素值的类型为unsigned char型，对应的format格式为B。这里还有加上图像大小784，是为了读取784个B格式数据，如果没有则只会读取一个值（即一副图像中的一个像素值）</span>    print(fmt_image, offset, struct.calcsize(fmt_image))    images = np.empty((num_images, num_rows, num_cols))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num_images):        images[i] = np.array(struct.unpack_from(fmt_image, bin_data, offset)).reshape((num_rows, num_cols))        offset += struct.calcsize(fmt_image)    <span class="hljs-keyword">return</span> images<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode_idx1_ubyte</span><span class="hljs-params">(idx1_ubyte_file)</span>:</span>    <span class="hljs-string">"""    解析idx1文件的通用函数    :param idx1_ubyte_file: idx1文件路径    :return: 数据集    """</span>    <span class="hljs-comment"># 读取二进制数据</span>    bin_data = open(idx1_ubyte_file, <span class="hljs-string">'rb'</span>).read()    <span class="hljs-comment"># 解析文件头信息，依次为魔数和标签数</span>    offset = <span class="hljs-number">0</span>    fmt_header = <span class="hljs-string">'&gt;ii'</span>    magic_number, num_images = struct.unpack_from(fmt_header, bin_data, offset)    <span class="hljs-comment"># print('魔数:%d, 图片数量: %d张' % (magic_number, num_images))</span>    <span class="hljs-comment"># 解析数据集</span>    offset += struct.calcsize(fmt_header)    fmt_image = <span class="hljs-string">'&gt;B'</span>    labels = np.empty(num_images, dtype=np.int64)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num_images):        <span class="hljs-comment"># if (i + 1) % 10000 == 0:</span>        <span class="hljs-comment">#     print('已解析 %d' % (i + 1) + '张')</span>        labels[i] = struct.unpack_from(fmt_image, bin_data, offset)[<span class="hljs-number">0</span>]        offset += struct.calcsize(fmt_image)    <span class="hljs-keyword">return</span> labels<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_train_images</span><span class="hljs-params">(idx_ubyte_file=train_images_idx3_ubyte_file)</span>:</span>    <span class="hljs-keyword">return</span> decode_idx3_ubyte(idx_ubyte_file)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_train_labels</span><span class="hljs-params">(idx_ubyte_file=train_labels_idx1_ubyte_file)</span>:</span>    <span class="hljs-keyword">return</span> decode_idx1_ubyte(idx_ubyte_file)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_test_images</span><span class="hljs-params">(idx_ubyte_file=test_images_idx3_ubyte_file)</span>:</span>    <span class="hljs-keyword">return</span> decode_idx3_ubyte(idx_ubyte_file)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_test_labels</span><span class="hljs-params">(idx_ubyte_file=test_labels_idx1_ubyte_file)</span>:</span>    <span class="hljs-keyword">return</span> decode_idx1_ubyte(idx_ubyte_file)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_data</span><span class="hljs-params">()</span>:</span>    train_img = load_train_images()    train_img = train_img.reshape(train_img.shape[<span class="hljs-number">0</span>], train_img.shape[<span class="hljs-number">1</span>] * train_img.shape[<span class="hljs-number">2</span>]).T / <span class="hljs-number">255</span>    test_img = load_test_images()    test_img = test_img.reshape(test_img.shape[<span class="hljs-number">0</span>], test_img.shape[<span class="hljs-number">1</span>] * test_img.shape[<span class="hljs-number">2</span>]).T / <span class="hljs-number">255</span>    train_label = load_train_labels()    test_label = load_test_labels()    <span class="hljs-keyword">return</span> train_img, train_label, test_img, test_label</code></pre></div><p>数据处理后训练样本和测试样本的维度：<br><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attribute">train_img</span>: (784, 60000)<span class="hljs-attribute">train_label</span>: (60000, )<span class="avrasm"><span class="hljs-symbol">test_img:</span> (<span class="hljs-number">784</span>, <span class="hljs-number">10000</span>)<span class="hljs-symbol">test_label:</span> (<span class="hljs-number">10000</span>, )</span></code></pre></div></p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>在读取数据之后，为了程序能够正常运行，需要对数据进行预处理。</p><ul><li>对图像数据进行归一化操作，因为每个像素点的值是在0-255范围内，进行归一化可以减少运算量，同时避免运算结果溢出；</li><li>对labels进行one-hot编码，这一步骤主要是为了计算交叉熵损失函数时能够正常运行。one-hot编码指的是正确解的标签为1，其余为0，比如3表示为”0010000000“。</li></ul><p>one-hot编码的python实现如下：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dense_to_one_hot</span><span class="hljs-params">(labels_dense, num_classes)</span>:</span>    <span class="hljs-string">"""    Convert class labels from scalars to one-hot vectors.    num_classes: 总共的类别数    """</span>    num_labels = labels_dense.shape[<span class="hljs-number">0</span>]    <span class="hljs-comment"># 偏移量，arange函数产生0，1，num_labels-1之间的数</span>    index_offset = np.arange(num_labels) * num_classes    labels_one_hot = np.zeros((num_labels, num_classes))    <span class="hljs-comment"># flat返回一个一维迭代器，ravel()函数将多维数组转化为一维数组</span>    labels_one_hot.flat[index_offset + labels_dense.ravel()] = <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> labels_one_hot</code></pre></div><h1 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h1><p>首先需要初始化参数，b直接全部初始化为0，W使用<code>randn</code>生成随机数，注意b和W不能全部都一样，否则任意一层中的每个神经元输出都一样，最后反向传播也一样，就没有任何意义了。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># x: 784*60000, 784*1000</span><span class="hljs-comment"># # y: 10*60000, 10*1000</span><span class="hljs-comment"># # W1: 128*784</span><span class="hljs-comment"># # b1: 128*1</span><span class="hljs-comment"># # W2: 64*128</span><span class="hljs-comment"># # b2: 64*1</span><span class="hljs-comment"># # W3: 10*64</span><span class="hljs-comment"># # b3: 10*1</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_parameters</span><span class="hljs-params">(layers_dim=<span class="hljs-params">(<span class="hljs-number">784</span>, <span class="hljs-number">25</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10</span>)</span>)</span>:</span>    <span class="hljs-string">"""    初始化参数    :return:    """</span>    m = len(layers_dim)    parameters = &#123;&#125;    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m - <span class="hljs-number">1</span>):        <span class="hljs-comment"># randn生成的随机数符合标准高斯分布，期望为0，方差为1</span>        parameters[<span class="hljs-string">'W'</span> + str(i + <span class="hljs-number">1</span>)] = np.random.randn(layers_dim[i + <span class="hljs-number">1</span>], layers_dim[i]) * <span class="hljs-number">0.001</span>        parameters[<span class="hljs-string">'b'</span> + str(i + <span class="hljs-number">1</span>)] = np.zeros((layers_dim[i + <span class="hljs-number">1</span>], <span class="hljs-number">1</span>))    <span class="hljs-keyword">return</span> parameters</code></pre></div><h1 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h1><p>前向传播的基本步骤是先使用一个线性函数，然后使用激励函数将结果非线性化。可以如下表示：</p><div class="hljs"><pre><code class="hljs python">y = Wx + ba = activation(y) <span class="hljs-comment"># 使用时用具体的激励函数替换</span></code></pre></div><p>实验中主要使用了<code>tanh</code>和<code>softmax</code>这两个激励函数。<code>tanh</code>函数公式及python实现如下：</p><script type="math/tex; mode=display">y = \frac{e^x - e^{-x}}{e^x + e^{-x}} \tag{1}</script><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tanh</span><span class="hljs-params">(x)</span>:</span>    <span class="hljs-keyword">return</span> (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))</code></pre></div><p><code>softmax</code>函数公式及python实现如下, </p><script type="math/tex; mode=display">\operatorname{Softmax}\left(x_{i}\right)=\frac{e^{x_i}}{\sum_{j} e^{x_{j}}} \tag{2}</script><p>需要注意的是，在python实现<code>softmax</code>时，为了避免计算溢出，可以减去一个最大值之后，再进行指数运算。</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">softmax</span><span class="hljs-params">(z)</span>:</span>    <span class="hljs-comment"># 实现softmax分类器输出转化</span>    c = np.max(z)    z_exp = np.exp(z - c) <span class="hljs-comment"># 避免指数运算产生溢出</span>    z_sum_column = z_exp.sum(axis=<span class="hljs-number">0</span>).T    <span class="hljs-keyword">return</span> z_exp / z_sum_column</code></pre></div><h1 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h1><p>反向传播过程主要根据链式规则求解各个参数的关于损失函数的梯度，以便对参数进行优化，从而使损失值减小。实验中损失函数使用的是交叉熵损失函数，可以表示为：</p><script type="math/tex; mode=display">L = -\frac{1}{m}{\sum_{i} {y_i \log{a_i}}} \tag{3}</script><p>其中 为样本数量，$y_i$ 表示实际值，$a_i$ 表示预测值, 而 $a_i$ 是经过softmax函数得到的结果，即 $a_i$ 可以表示为：</p><script type="math/tex; mode=display">a_i = \frac{e^{z_i}}{\sum_{j} e^{z_{j}}} \tag{4}</script><p>则 $a_j$ 对 $z_i$ 求偏导数，可得：</p><script type="math/tex; mode=display">\frac{\partial a_{j}}{\partial z_{i}}=\left\{\begin{array}{ll}a_{i}\left(1-a_{i}\right), & i=j \\-a_{i} a_{j} & i \neq j\end{array}\right. \tag{5}</script><p>使用上式，L 对 $z_i$ 求偏导数得： </p><script type="math/tex; mode=display">\begin{array}{l}\quad \frac{\partial L}{\partial z_{i}}=\frac{\partial L}{\partial a_j} \frac{\partial a_j}{\partial z_i}=\sum_{j}-\frac{y i}{a_{j}} \frac{\partial a_{j}}{\partial z_{i}} \\=\frac{-y_{i}}{a_{i}} a_{i}\left(1-a_{i}\right)+\sum_{j}^{j \neq i}-\frac{y_{i}}{a_{j}}\left(-a_{i} a_{j}\right) \\=-y_{i}\left(1 - a_{i}\right)+\sum_{j=1}^{j \neq i} a_{i} y_{j} \\=a_{i} y_{i}-y_{i}+a_{i} \sum_{i \neq j} y_{j} \\=a_{i} \sum_{j} y_{j}-y_{i}=a_{i}-y_{i}\end{array}</script><p>记上式为$dZ$ , 然后计算 $\frac{\partial L}{\partial W}$，其中X为上一层传进来的数据。:</p><script type="math/tex; mode=display">\frac{\partial L}{\partial W} = \frac{\partial L}{\partial Z} \frac{\partial Z}{\partial W} \\= dZX</script><p>实验中还是用了<code>tanh</code>函数，其导数为：</p><script type="math/tex; mode=display">f(x)^{\prime}=1-(\tanh (x))^{2} \tag{6}</script><p>反向传播各个过程的偏导数都求出来之后，就可以编码实现了，具体代码如下：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backward_propagation</span><span class="hljs-params">(x, y, cache, parameters)</span>:</span>    <span class="hljs-string">"""    x: 网络中的输入数据    y: 网络的输出数据    cache：缓存各阶段计算的结果    """</span>    W2 = parameters[<span class="hljs-string">'W2'</span>]    W3 = parameters[<span class="hljs-string">'W3'</span>]    m = y.shape[<span class="hljs-number">0</span>]    (Z1, A1, Z2, A2, Z3, A3) = cache    dz3 = (A3 - y) / m    dW3 = np.dot(dz3, A2.T)    db3 = np.mean(dz3, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-keyword">True</span>)    da2 = np.dot(W3.T, dz3)    dz2 = np.multiply(da2, <span class="hljs-number">1</span> - np.multiply(A2, A2))    dW2 = np.dot(dz2, A1.T) / m    db2 = np.mean(dz2, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-keyword">True</span>)    da1 = np.dot(W2.T, dz2)    dz1 = np.multiply(da1, <span class="hljs-number">1</span> - np.multiply(A1, A1))    dW1 = np.dot(dz1, x.T) / m    db1 = np.mean(dz1, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-keyword">True</span>)    gradients = &#123;<span class="hljs-string">"dz3"</span>: dz3, <span class="hljs-string">"dW3"</span>: dW3, <span class="hljs-string">"db3"</span>: db3,                 <span class="hljs-string">"da2"</span>: da2, <span class="hljs-string">"dz2"</span>: dz2, <span class="hljs-string">"dW2"</span>: dW2, <span class="hljs-string">"db2"</span>: db2,                 <span class="hljs-string">"da1"</span>: da1, <span class="hljs-string">"dz1"</span>: dz1, <span class="hljs-string">"dW1"</span>: dW1, <span class="hljs-string">"db1"</span>: db1&#125;    <span class="hljs-keyword">return</span> gradients</code></pre></div><h1 id="损失函数和优化器"><a href="#损失函数和优化器" class="headerlink" title="损失函数和优化器"></a>损失函数和优化器</h1><p>损失函数使用的是交叉熵损失函数，交叉熵函数的公式见公式(3), 具体实现如下：</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cross_entropy_loss</span><span class="hljs-params">(a, y)</span>:</span>    <span class="hljs-string">"""    交叉熵损失函数    :param a: 预测值    :param y: 实际值    :return:    """</span>    m = a.shape[<span class="hljs-number">1</span>]    <span class="hljs-comment"># 对数操作加1e-7防止出现0</span>    loss = -np.multiply(np.log(a + <span class="hljs-number">1e-7</span>), y).sum(axis=<span class="hljs-number">0</span>)    cost = loss.sum() / m    <span class="hljs-keyword">return</span> cost</code></pre></div><p>使用上述的实现需要注意两点：对实际的label值需要使用<code>one-hot</code>编码；实现中使用了对数运算，为了防止出现0，需要加上一个偏置值。</p><p>梯度下降法根据计算得到的梯度更新参数，从而达到减小损失值的效果，可以表示成如下形式为：</p><script type="math/tex; mode=display">x_{n}^{(i+1)}=x_{n}^{(i)}-\eta \cdot \frac{\partial f}{\partial x_{n}}\left(\mathbf{x}^{(i)}\right)</script><p>其中$\eta$ 指的就是学习率，python实现如下：</p><div class="hljs"><pre><code class="hljs python">ef gradient_descent(parameters, grads, learning_rate):    <span class="hljs-string">"""    使用梯度下降法更新参数    :param parameters:    :param grads:    :param learning_rate:    :return:    """</span>    length = len(parameters) // <span class="hljs-number">2</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length):        parameters[<span class="hljs-string">"W"</span> + str(i + <span class="hljs-number">1</span>)] = parameters[<span class="hljs-string">"W"</span> + str(i + <span class="hljs-number">1</span>)] - learning_rate * grads[<span class="hljs-string">"dW"</span> + str(i + <span class="hljs-number">1</span>)]        parameters[<span class="hljs-string">"b"</span> + str(i + <span class="hljs-number">1</span>)] = parameters[<span class="hljs-string">"b"</span> + str(i + <span class="hljs-number">1</span>)] - learning_rate * grads[<span class="hljs-string">"db"</span> + str(i + <span class="hljs-number">1</span>)]    <span class="hljs-keyword">return</span> parameters</code></pre></div><h1 id="训练及预测"><a href="#训练及预测" class="headerlink" title="训练及预测"></a>训练及预测</h1><p>训练过程：初始化参数—&gt;前向传播—&gt;反向传播—&gt;参数优化。</p><p>训练过程的参数设置如下：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attr">epochs</span> = <span class="hljs-number">100</span><span class="hljs-attr">BATCH_SIZE</span> = <span class="hljs-number">100</span><span class="hljs-attr">learning_rate</span> = <span class="hljs-number">0.005</span></code></pre></div><p>实验时，把训练和预测两部分放到了一起运行，执行过程如下，其中正确率达到了97.83%</p><p><img src="http://image.ningxin.site/20200615153942.png" srcset="/img/loading.gif" alt=""></p><p>loss值下降过程如下： </p><p><img src="http://image.ningxin.site/20200615161053.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机搭建Hadoop过程记录</title>
    <link href="/2020/06/07/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHadoop%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/06/07/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAHadoop%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-搭建Hadoop分布式集群环境"><a href="#1-搭建Hadoop分布式集群环境" class="headerlink" title="1. 搭建Hadoop分布式集群环境"></a>1. 搭建Hadoop分布式集群环境</h1><h2 id="1-1-安装Linux虚拟机"><a href="#1-1-安装Linux虚拟机" class="headerlink" title="1.1 安装Linux虚拟机"></a>1.1 安装Linux虚拟机</h2><p>首先下载并安装VirtualBox 6.1.8，然后准备安装Linux虚拟机，需要提前下载好镜像文件，我下载的是<code>ubuntu-16.04.6-server-amd64.iso</code>。然后新建一个虚拟机，分配1G内存，10G虚拟空间。在新建虚拟机之后，需要注意以下设置：</p><ul><li>设置启动顺序：如下图所示，将光驱启动调到最前面。</li></ul><a id="more"></a><p><img src="http://image.ningxin.site/20200603230721.png" srcset="/img/loading.gif" alt=""></p><ul><li>如下选择镜像文件的存放位置：</li></ul><p><img src="http://image.ningxin.site/20200603230506.png" srcset="/img/loading.gif" alt=""></p><p>完成上述操作后，点击运行进行虚拟机的安装。重复操作，安装如下四台虚拟机，其中ubuntu作为master，slave1、slave2、slave3作为slave。</p><p><img src="http://image.ningxin.site/20200603231706.png" srcset="/img/loading.gif" alt=""></p><h2 id="1-2-配置Hadoop环境"><a href="#1-2-配置Hadoop环境" class="headerlink" title="1.2 配置Hadoop环境"></a>1.2 配置Hadoop环境</h2><h3 id="1-2-3-前置条件"><a href="#1-2-3-前置条件" class="headerlink" title="1.2.3 前置条件"></a>1.2.3 前置条件</h3><h4 id="1-2-3-1-编辑hostname文件"><a href="#1-2-3-1-编辑hostname文件" class="headerlink" title="1.2.3.1 编辑hostname文件"></a>1.2.3.1 编辑hostname文件</h4><p>使用<code>hostnamectl set-hostname</code>命令设置hostname分别为master、slave1、slave2、slave3</p><p><img src="http://image.ningxin.site/20200603232421.png" srcset="/img/loading.gif" alt=""></p><h4 id="1-2-3-2-编辑hosts文件"><a href="#1-2-3-2-编辑hosts文件" class="headerlink" title="1.2.3.2 编辑hosts文件"></a>1.2.3.2 编辑hosts文件</h4><p>hosts文件用来记录IP和hostname之间的对应关系。使用<code>ifconfig</code>命令来查看IP地址，最后发现4台虚拟机的IP地址是一样的，需要修改网线连接方式，如下选择<code>桥接网卡</code>即可：<br><img src="http://image.ningxin.site/20200603232752.png" srcset="/img/loading.gif" alt=""></p><p>然后修改<code>/etc/hosts</code>文件，如下所示：</p><p><img src="http://image.ningxin.site/20200603232949.png" srcset="/img/loading.gif" alt=""></p><h4 id="1-2-3-3-配置ssh免密登录"><a href="#1-2-3-3-配置ssh免密登录" class="headerlink" title="1.2.3.3 配置ssh免密登录"></a>1.2.3.3 配置ssh免密登录</h4><p>在master上使用<code>ssh-keygen -t rsa</code>命令生成密钥（保存在<code>~/.ssh</code>目录下），然后将公钥上传到slave的<code>~/.ssh/authorized_keys</code>中即可。</p><h2 id="1-2-安装并配置jdk"><a href="#1-2-安装并配置jdk" class="headerlink" title="1.2 安装并配置jdk"></a>1.2 安装并配置jdk</h2><p>首先在Windows上下载<code>jdk-8u251-linux-x64.tar.gz</code>，然后使用pscp工具上传到Linux虚拟机上。</p><p><img src="http://image.ningxin.site/20200602154744.png" srcset="/img/loading.gif" alt=""></p><p>将jdk解压在<code>/usr/java/</code>目录下，然后配置java环境变量，在<code>/etc/profile</code>文件中添加如下内容，然后运行<code>source /etc/profile</code>命令使环境变量生效：</p><div class="hljs"><pre><code class="hljs undefined">export JAVA_HOME=<span class="hljs-regexp">/usr/java</span><span class="hljs-regexp">/jdk1.8.0_251export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/</span><span class="hljs-symbol">LIB:</span>$JAVA_HOME/jre/<span class="hljs-class"><span class="hljs-keyword">lib</span></span>export PATH=$<span class="hljs-symbol">PATH:</span>$JAVA_HOME/<span class="hljs-symbol">bin:</span>$JAVA_HOME/jre/bin</code></pre></div><h2 id="1-3-安装并配置Hadoop"><a href="#1-3-安装并配置Hadoop" class="headerlink" title="1.3 安装并配置Hadoop"></a>1.3 安装并配置Hadoop</h2><h3 id="1-3-1-配置环境变量"><a href="#1-3-1-配置环境变量" class="headerlink" title="1.3.1 配置环境变量"></a>1.3.1 配置环境变量</h3><p>先从Windows上下载Hadoop2.10.0并上传到Linux虚拟机上，解压到<code>/usr/hadoop/</code>目录下，然后添加如下环境变量：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">HADOOP_HOME</span>=/usr/hadoop/hadoop-2.10.0<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</code></pre></div><h3 id="1-3-2-配置相关配置文件"><a href="#1-3-2-配置相关配置文件" class="headerlink" title="1.3.2 配置相关配置文件"></a>1.3.2 配置相关配置文件</h3><p>以下提到的配置文件都位于<code>etc/hadoop/</code>目录下。</p><p><img src="http://image.ningxin.site/20200604105619.png" srcset="/img/loading.gif" alt=""></p><p>注意：只需要修改master中的Hadoop配置文件，然后将配置好的Hadoop上传到slave中去即可，避免重复配置的麻烦。</p><h4 id="1-3-2-1-hadoop-env-sh-和-yarn-env-sh"><a href="#1-3-2-1-hadoop-env-sh-和-yarn-env-sh" class="headerlink" title="1.3.2.1 hadoop-env.sh 和 yarn-env.sh"></a>1.3.2.1 hadoop-env.sh 和 yarn-env.sh</h4><p>两个文件都是修改<code>JAVA_HOME</code>的值，需要使用实际的路径，而不是环境变量。<br><img src="http://image.ningxin.site/20200602161801.png" srcset="/img/loading.gif" alt=""></p><h4 id="1-3-2-2-core-site-xml"><a href="#1-3-2-2-core-site-xml" class="headerlink" title="1.3.2.2 core-site.xml"></a>1.3.2.2 core-site.xml</h4><p>配置监听端口和缓存目录，缓存目录不存在则需要创建。</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-params">&lt;configuration&gt;</span><span class="hljs-meta"># HDFS Web UI 监听端口配置</span><span class="hljs-params">&lt;property&gt;</span><span class="hljs-params">&lt;name&gt;</span>fs.defaultFS<span class="hljs-params">&lt;/name&gt;</span><span class="hljs-params">&lt;value&gt;</span>hdfs:<span class="hljs-comment">//master:8020&lt;/value&gt;</span><span class="hljs-params">&lt;/property&gt;</span><span class="hljs-meta"># hadoop 缓存目录，更改为自己的目录（从根目录开始，不存在需创建）</span><span class="hljs-params">&lt;property&gt;</span><span class="hljs-params">&lt;name&gt;</span>hadoop.tmp.dir<span class="hljs-params">&lt;/name&gt;</span><span class="hljs-params">&lt;value&gt;</span>file:<span class="hljs-meta-keyword">/root/</span>software/hadooptmp<span class="hljs-params">&lt;/value&gt;</span><span class="hljs-params">&lt;/property&gt;</span><span class="hljs-params">&lt;/configuration&gt;</span></code></pre></div><h4 id="1-3-2-3-hdfs-site-xml"><a href="#1-3-2-3-hdfs-site-xml" class="headerlink" title="1.3.2.3 hdfs-site.xml"></a>1.3.2.3 hdfs-site.xml</h4><p>需要创建HDFS存储目录，namenode用来存储namenode文件，data存储datanode数据，tmp存储临时文件。</p><div class="hljs"><pre><code class="hljs undefined">usr<span class="hljs-regexp">/hadoop/</span>hadoop-<span class="hljs-number">2.10</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/hdfs/</span>namenodeusr<span class="hljs-regexp">/hadoop/</span>hadoop-<span class="hljs-number">2.10</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/hdfs/</span>datausr<span class="hljs-regexp">/hadoop/</span>hadoop-<span class="hljs-number">2.10</span>.<span class="hljs-number">0</span><span class="hljs-regexp">/hdfs/</span>tmp</code></pre></div><p><img src="http://image.ningxin.site/20200602164047.png" srcset="/img/loading.gif" alt=""></p><h4 id="1-3-2-4-mapred-site-xml"><a href="#1-3-2-4-mapred-site-xml" class="headerlink" title="1.3.2.4 mapred-site.xml"></a>1.3.2.4 mapred-site.xml</h4><p><code>mapred-site.xml</code>文件需要从<code>mapred-site.xml.template</code>使用cp命令生成：<br><code>cp mapred-site.xml.template mapred-site.xml</code>。然后设置MapReduce运行于yarn上：</p><p><img src="http://image.ningxin.site/20200602164356.png" srcset="/img/loading.gif" alt=""></p><h4 id="1-3-2-5-yarn-site-xml"><a href="#1-3-2-5-yarn-site-xml" class="headerlink" title="1.3.2.5 yarn-site.xml"></a>1.3.2.5 yarn-site.xml</h4><p><img src="http://image.ningxin.site/20200602164735.png" srcset="/img/loading.gif" alt=""></p><p>上面<code>yarn-site.xml</code>文件中将<code>hostname</code>错打成<code>hostnane</code>，最后导致Hadoop运行wordcount时，不能结束，修改后如下：</p><p><img src="http://image.ningxin.site/20200603095221.png" srcset="/img/loading.gif" alt=""></p><h4 id="1-3-2-6-slaves"><a href="#1-3-2-6-slaves" class="headerlink" title="1.3.2.6 slaves"></a>1.3.2.6 slaves</h4><p>在slaves文件中添加如下内容来设置slave：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attribute">slave1</span>slave2slave3</code></pre></div><h3 id="1-3-3-启动Hadoop"><a href="#1-3-3-启动Hadoop" class="headerlink" title="1.3.3 启动Hadoop"></a>1.3.3 启动Hadoop</h3><p>第一次启动需要使用<code>hdfs namenode -format</code>格式化文件系统，出现“Cannot create directory /usr/hadoop/hadoop-2.10.0/hdfs/namenode/current”错误，显示无法创建current文件。无法创建目录的原因是因为<code>hadoop-2.10.0</code>的文件拥有者是<code>root</code>，直接使用<code>sudo hdfs namenode -format</code>会出现找不到命令的错误，两种解决方法：1. 使用<code>sudo su</code>切换到管理员身份；2. 修改<code>hadoop-2.10.0</code>的文件拥有者为普通用户。</p><ul><li>启动: 使用<code>start-dfs.sh</code>启动分布式文件系统。</li></ul><p><img src="http://image.ningxin.site/20200602213020.png" srcset="/img/loading.gif" alt=""></p><ul><li>jps: 使用jps命令验证HDFS是否启动成功</li></ul><p><img src="http://image.ningxin.site/20200602213149.png" srcset="/img/loading.gif" alt=""></p><ul><li>启动yarn: 使用<code>start-yarn.sh</code>启动yarn</li></ul><p><img src="http://image.ningxin.site/20200602214232.png" srcset="/img/loading.gif" alt=""></p><ul><li>浏览器: 在浏览器中输入<code>http:master:50070</code>查看UI界面</li></ul><p><img src="http://image.ningxin.site/20200602214338.png" srcset="/img/loading.gif" alt=""></p><h1 id="2-HDFS文件上传"><a href="#2-HDFS文件上传" class="headerlink" title="2. HDFS文件上传"></a>2. HDFS文件上传</h1><p>创建<code>input.txt</code>文件并输入以下内容：</p><p><img src="http://image.ningxin.site/20200604001324.png" srcset="/img/loading.gif" alt=""></p><p>使用<code>hdfs dfs -put</code>命令将文件上传到hdfs中，然后使用<code>hdfs dfs -cat</code>命令查看文件中的具体内容。</p><p><img src="http://image.ningxin.site/20200604001901.png" srcset="/img/loading.gif" alt=""></p><h1 id="3-运行wordcount程序"><a href="#3-运行wordcount程序" class="headerlink" title="3. 运行wordcount程序"></a>3. 运行wordcount程序</h1><p>wordcount程序在<code>share/hadoop/hadoop-mapreduce-examples-2.10.0.jar</code>包中, 运行该程序之前需要提前创建输入文件,输出文件不需要创建， 输入输出文件如下：</p><div class="hljs"><pre><code class="hljs undefined">/wordcount/input/<span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.txt</span>/wordcount/output（不要创建）</code></pre></div><p>其中<code>input.txt</code>文件中的内容如下：</p><p><img src="http://image.ningxin.site/20200603100517.png" srcset="/img/loading.gif" alt=""></p><p>然后使用命令<code>hadoop jar hadoop-mapreduce-examples-2.10.0.jar wordcount /wordcount/input/input.txt /wordcount/output</code>运行wordcount程序，结果如下：<br><img src="http://image.ningxin.site/20200603100155.png" srcset="/img/loading.gif" alt=""></p><p>使用命令<code>hdfs dfs -cat /wordcount/output/part-r-00000</code>查看输出结果：<br><img src="http://image.ningxin.site/20200603100430.png" srcset="/img/loading.gif" alt=""></p><h1 id="4-编写wordcount程序"><a href="#4-编写wordcount程序" class="headerlink" title="4. 编写wordcount程序"></a>4. 编写wordcount程序</h1><p>wordcount程序见附件<code>WordCount.java</code>。</p><p>master中创建如下目录, 其中src存放java文件，classes存放class文件：</p><div class="hljs"><pre><code class="hljs undefined">~<span class="hljs-regexp">/wordcount/</span>src~<span class="hljs-regexp">/wordcount/</span>classes</code></pre></div><h2 id="4-1-编译"><a href="#4-1-编译" class="headerlink" title="4.1 编译"></a>4.1 编译</h2><p>编译时需要引入的包如下：</p><div class="hljs"><pre><code class="hljs undefined">share/hadoop/common/hadoop-common-<span class="hljs-number">2.10</span>.<span class="hljs-number">0</span>.jarshare/hadoop/mapreduce/hadoop-mapreduce-client-core-<span class="hljs-number">2.10</span>.<span class="hljs-number">0</span>.jarshare/hadoop/common/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">commons</span>-<span class="hljs-title">cli</span>.1.2.<span class="hljs-title">jar</span></span></code></pre></div><p>使用javac命令进行编译，并用<code>-classpath</code>指定引入的包，<code>-d</code>指定输出目录：</p><p><img src="http://image.ningxin.site/20200603213806.png" srcset="/img/loading.gif" alt=""></p><h2 id="4-2-打包"><a href="#4-2-打包" class="headerlink" title="4.2 打包"></a>4.2 打包</h2><p>使用命令<code>jar -cvf wordcount.jar classes/</code>进行打包：</p><p><img src="http://image.ningxin.site/20200603213924.png" srcset="/img/loading.gif" alt=""></p><h2 id="4-3-运行"><a href="#4-3-运行" class="headerlink" title="4.3 运行"></a>4.3 运行</h2><p>使用如下命令运行wordcount.jar</p><p><code>hadoop jar wordcount.jar WordCount /wordcount/input/input.txt /output</code></p><p>然后出现<code>Class WordCount$Reduce not found</code>的错误，最后使用如下打包命令，解决问题：</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-selector-tag">jar</span> <span class="hljs-selector-tag">cf</span> <span class="hljs-selector-tag">wordcount</span><span class="hljs-selector-class">.jar</span> <span class="hljs-selector-tag">WordCount</span>*<span class="hljs-selector-class">.class</span></code></pre></div><p>运行界面如下：<br><img src="http://image.ningxin.site/20200603221301.png" srcset="/img/loading.gif" alt=""></p><p>运行后的输出结果如下：<br><img src="http://image.ningxin.site/20200603221509.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3D-UNet笔记</title>
    <link href="/2020/06/03/3D-UNet%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/03/3D-UNet%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://arxiv.org/pdf/1606.06650.pdf" target="_blank" rel="noopener">论文地址</a></p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>医学图像通常是由多个2D切片构成一整张图，对这样的数据进行标注比较困难,只能一张一张地标注2D图像，并将2D图像送进模型进行训练，但相邻的切片几乎一样，因此这样的做法效率很低。<br>论文的作者提出了3D U-Net模型，该模型主要有两种应用：</p><ul><li>semi-automated setup:  可以对只进行了稀疏标注的数据集进行训练；</li><li>fully-automated setup:  假设稀疏标注集存在，对该数据集进行训练。</li></ul><a id="more"></a><h1 id="2-网络结构"><a href="#2-网络结构" class="headerlink" title="2. 网络结构"></a>2. 网络结构</h1><p><img src="http://image.ningxin.site/20200603160416.png" srcset="/img/loading.gif" alt="网络结构"><br>该模型分为<code>analysis path</code> 和 <code>synthesis path</code>两个部分，主要结构和<code>U-Net</code>一样。</p><p><code>analysis path</code> 主要包括以下操作：该部分有4层，每一层都包含两个<code>3 x 3 x 3</code>的卷积，每次卷积之后进行<code>batch normalizetion</code>(BN) 操作和<code>ReLu</code>操作，然后进行strides为2的<code>2 x 2 x 2</code>的最大池化操作。</p><p><code>synthesis path</code> 主要包括以下操作：该部分有3层，每一层首先使用一个strides为2、卷积核为<code>2 x 2 x 2</code>的反卷积操作，然后与<code>analysis path</code>中对应的<code>fature map</code>进行cat操作，再然后是两个<code>3 x 3 x 3</code>的卷积操作，每次卷积之后进行<code>batch normalizetion</code>(BN) 操作和<code>ReLu</code>操作，然后进行strides为2的<code>2 x 2 x 2</code>的最大池化操作。</p><p>在最后一层输出时使用<code>1 x 1 x 1</code>的卷积来减少通道数。</p><p>论文中提到的一个亮点就是，3D U-Net使用了<code>weighted softmax loss function</code>将未标记的像素点设置为0以至于可以让网络可以更多地仅仅学习标注到的像素点，从而达到普适性地特点。</p><h1 id="3-训练"><a href="#3-训练" class="headerlink" title="3. 训练"></a>3. 训练</h1><p>3D U-Net采用了数据增广（data augmentation），主要是rotation、scaling和将图像设置为gray，于此同时在训练数据上和真实标注的数据上运用平滑的密集变形场(smooth dense deformation field)。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V-Net笔记</title>
    <link href="/2020/05/24/V-Net%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/05/24/V-Net%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>V-Net用于3D图像分割（基于3D卷积），引入了新的目标函数（<code>Dice coefficient</code>）,采用<code>random non-linear transformation</code>和<code>histogram matching</code>的数据扩充方法。</p><h1 id="2-网络结构"><a href="#2-网络结构" class="headerlink" title="2. 网络结构"></a>2. 网络结构</h1><p><img src="https://gitee.com/huster_ning/image/raw/master/image/Snipaste_2020-05-27_21-15-06.jpg" srcset="/img/loading.gif" alt="Snipaste_2020-05-27_21-15-06"></p><a id="more"></a><p>网络的左侧部分由压缩路径组成，而右侧部分解压缩直到达到其原始大小。</p><h2 id="2-1-压缩路径"><a href="#2-1-压缩路径" class="headerlink" title="2.1 压缩路径"></a>2.1 压缩路径</h2><p>压缩路径中每个阶段中执行几次<code>5 x 5 x 5</code>大小的卷积操作，卷积之后使用<code>PReLU</code>函数进行非线性化操作，然后执行<code>element-wise sum</code>操作，再执行步幅为2的<code>2 x 2 x 2</code>的卷积（该步骤是使用卷积代替池化操作），将分辨率变为原来的一半。每个阶段执行完后，通道数变为原来的两倍。</p><ul><li>卷积代替池化：能够有更小的内存占用，网络性能更好</li><li>element-wise sum操作：如下图所示，首先16个x执行cat操作得到x16, 得到的x16的维度与out一致，<code>element-wise sum</code>操作就是将x16和out的对应像素点执行相加操作。</li></ul><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, x)</span>:</span>    <span class="hljs-comment"># do we want a PRELU here as well?</span>    out = self.bn1(self.conv1(x))    <span class="hljs-comment"># split input in to 16 channels</span>    <span class="hljs-comment"># 增加通道数与out一致</span>    x16 = torch.cat((x, x, x, x, x, x, x, x,                     x, x, x, x, x, x, x, x), <span class="hljs-number">0</span>)    <span class="hljs-comment"># 执行element-wise sum操作之后在执行relu1</span>    out = self.relu1(torch.add(out, x16))    <span class="hljs-keyword">return</span> out</code></pre></div><h2 id="2-2-解压缩路径"><a href="#2-2-解压缩路径" class="headerlink" title="2.2 解压缩路径"></a>2.2 解压缩路径</h2><p>在解压缩路径中，与<code>U-Net</code>类似，将网络左侧部分的早期阶段提取的特征转发到右侧部分，即网络结构图中的<code>Fine-grained features forwarding</code>操作。通过这种方式，可以收集在压缩路径中丢失的细粒度细节，并且可以提高最终轮廓预测的质量。每个阶段采用反卷积操作，将分辨率提高到原来的两倍，并且通道数变为原来的一半。最后使用一个<code>1 x 1 x 1</code>的卷积得到与输入大小相同的结果，并使用softmax函数得到概率分割图。</p><ul><li><code>Fine-grained features fowarding</code>: 左侧特征图与右侧对应特征图执行拼接操作。 </li></ul><h1 id="3-Dice-loss-layer"><a href="#3-Dice-loss-layer" class="headerlink" title="3. Dice loss layer"></a>3. Dice loss layer</h1><h2 id="3-1-Dice系数"><a href="#3-1-Dice系数" class="headerlink" title="3.1 Dice系数"></a>3.1 Dice系数</h2><p>参考博客<a href="https://www.aiuai.cn/aifarm1159.html" target="_blank" rel="noopener">医学图像分割之 Dice Loss</a></p><p>Dice系数，是一种集合相似度度量函数，通常用于计算两个样本的相似度（值范围为[0, 1]）:</p><script type="math/tex; mode=display">s=\frac{2|X \bigcap Y|}{|X|+|Y|}</script><p> $|X \bigcap Y|$ 表示X 和 Y 之间的交集；|X| 和 |Y| 分别表示 X 和 Y 的元素个数. 其中，分子中的系数 2，是因为分母存在重复计算 X 和 Y 之间的共同元素的原因.</p><p>在真正计算时可以将 |X⋂Y| 近似为预测图与 GT 分割图之间的点乘，并将点乘的元素结果相加求和：</p><script type="math/tex; mode=display">|X \bigcap Y|=\left[\begin{array}{cccc}0.01 & 0.03 & 0.02 & 0.02 \\0.05 & 0.12 & 0.09 & 0.07 \\0.89 & 0.85 & 0.88 & 0.91 \\0.99 & 0.97 & 0.95 & 0.97\end{array}\right] *\left[\begin{array}{cccc}0 & 0 & 0 & 0 \\0 & 0 & 0 & 0 \\1 & 1 & 1 & 1 \\1 & 1 & 1 & 1\end{array}\right]</script><h2 id="3-2-Dice系数在医学图像分割中的应用"><a href="#3-2-Dice系数在医学图像分割中的应用" class="headerlink" title="3.2 Dice系数在医学图像分割中的应用"></a>3.2 Dice系数在医学图像分割中的应用</h2><p>在以前的损失函数中，前景区域在学习期间比背景区域更重要。在V-Net中提出了一个基于Dice系数的新的目标函数，目标是求最大值。</p><script type="math/tex; mode=display">D=\frac{2 \sum_{i}^{N} p_{i} g_{i}}{\sum_{i}^{N} p_{i}^{2}+\sum_{i}^{N} g_{i}^{2}}</script><p>其中pi为预测结果，gi为实际结果。Dice系数的梯度为：</p><script type="math/tex; mode=display">\frac{\partial D}{\partial p_{j}}=2\left[\frac{g_{j}\left(\sum_{i}^{N} p_{i}^{2}+\sum_{i}^{N} g_{i}^{2}\right)-2 p_{j}\left(\sum_{i}^{N} p_{i} g_{i}\right)}{\left(\sum_{i}^{N} p_{i}^{2}+\sum_{i}^{N} g_{i}^{2}\right)^{2}}\right]</script><h2 id="3-3-Dice系数的Pytorch实现"><a href="#3-3-Dice系数的Pytorch实现" class="headerlink" title="3.3 Dice系数的Pytorch实现"></a>3.3 Dice系数的Pytorch实现</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dice_loss</span><span class="hljs-params">(pred, target)</span>:</span>    <span class="hljs-string">"""This definition generalize to real valued pred and target vector.This should be differentiable.    pred: tensor with first dimension as batch    target: tensor with first dimension as batch    """</span>smooth = <span class="hljs-number">1.</span><span class="hljs-comment"># have to use contiguous since they may from a torch.view op</span>iflat = pred.contiguous().view(<span class="hljs-number">-1</span>)tflat = target.contiguous().view(<span class="hljs-number">-1</span>)intersection = (iflat * tflat).sum()A_sum = torch.sum(iflat * iflat)B_sum = torch.sum(tflat * tflat)<span class="hljs-keyword">return</span> (<span class="hljs-number">2.</span> * intersection + smooth) / (A_sum + B_sum + smooth)</code></pre></div><h1 id="4-训练"><a href="#4-训练" class="headerlink" title="4. 训练"></a>4. 训练</h1><p>训练时主要采用下面的数据增广方法：</p><ul><li>使用<code>2 x 2 x 2</code>的网格控制点和<code>B-spline interpolation</code>(B样条插值)来获得稠密的形变场对图像进行非线性形变；</li><li>使用直方图匹配来获得不同的灰度分布的图像。 </li></ul>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>U-net笔记</title>
    <link href="/2020/05/21/U-net%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/05/21/U-net%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="U-net"><a href="#U-net" class="headerlink" title="U-net"></a>U-net</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>U-net是对FCN的改进，主要应用于医学图像分割。</p><p>U-net的网络结构如下所示：</p><p><img src="https://gitee.com/huster_ning/image/raw/master/image/v2-96f5e828c1e83c930aa4a2bb91e64c10_r.jpg" srcset="/img/loading.gif" alt="preview"></p><a id="more"></a><p>U-net包括<code>Contracting Path</code> 和 <code>Expanding Path</code> 两个部分，所有卷积层的<code>padding = 0</code>. U-net的计算过程如下：</p><ul><li><p><code>Contracting Path</code>部分进行下采样操作：2个<code>3 x 3</code>的卷积层 + 1个 <code>2 x 2 的 max pool</code>，重复四次以上操作；</p></li><li><p><code>Expanding Path</code>部分：2个<code>3 x 3</code>卷积层 + 1个<code>2 x 2</code>反卷积操作，然后与前面对应的层使用 <strong>拼接操作</strong> 进行特征融合，重复四次以上操作；</p></li><li><p>最后经过2个<code>3 x 3</code>卷积， 1个<code>1 x 1</code>卷积(类似于残差网络，用来降维)，然后使用softmax进行输出。</p></li></ul><h3 id="特征融合"><a href="#特征融合" class="headerlink" title="特征融合"></a>特征融合</h3><p>使用concat操作进行特征融合，而不是使用相加操作进行特征融合</p><p><img src="https://gitee.com/huster_ning/image/raw/master/image/image-20200520160912870.png" srcset="/img/loading.gif" alt="image-20200520160912870"></p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>U-net使用的是带权损失函数：</p><script type="math/tex; mode=display">E = \sum_{x\in\Omega}{\omega(x)\log(p_{l(x)}(x))}</script><p>其中 $w(x)$ 指的是权重，其实就是相当于交叉熵乘了一个权重，有点不解的是我看的代码中都是直接使用<code>CrossEntropyLoss</code>进行计算loss，如下代码所示：</p><div class="hljs"><pre><code class="hljs python">unet = Unet(in_channel=<span class="hljs-number">1</span>,out_channel=<span class="hljs-number">2</span>)<span class="hljs-comment">#out_channel represents number of segments desired</span>criterion = torch.nn.CrossEntropyLoss()optimizer = torch.optim.SGD(unet.parameters(), lr = <span class="hljs-number">0.01</span>, momentum=<span class="hljs-number">0.99</span>)optimizer.zero_grad()       outputs = unet(inputs)<span class="hljs-comment"># permute such that number of desired segments would be on 4th dimension</span>outputs = outputs.permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)m = outputs.shape[<span class="hljs-number">0</span>]<span class="hljs-comment"># Resizing the outputs and label to caculate pixel wise softmax loss</span>outputs = outputs.resize(m*width_out*height_out, <span class="hljs-number">2</span>)labels = labels.resize(m*width_out*height_out)loss = criterion(outputs, labels)loss.backward()optimizer.step()</code></pre></div><p>U-net的输入是<code>572 x 572</code>, 而输出是<code>388 x 388</code>，两者不一致，不能直接求损失函数，有两种方法：</p><ul><li>对预期输出从中心crop，使其与输出大小一致;</li><li>对输出结果进行padding操作，使其与输入大小一致。</li></ul><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>使用梯度下降法（SGD）进行优化。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云服务器发送邮件</title>
    <link href="/2019/07/18/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <url>/2019/07/18/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-在邮箱设置中开启SMTP"><a href="#1-在邮箱设置中开启SMTP" class="headerlink" title="1. 在邮箱设置中开启SMTP"></a>1. 在邮箱设置中开启SMTP</h3><p>SMTP:简单文件传输协议</p><h3 id="2-具体过程参考如下博客"><a href="#2-具体过程参考如下博客" class="headerlink" title="2. 具体过程参考如下博客"></a>2. 具体过程参考如下博客</h3><p><a href="https://yq.aliyun.com/articles/644134" target="_blank" rel="noopener">参考链接</a></p><a id="more"></a><h3 id="3-发送邮件"><a href="#3-发送邮件" class="headerlink" title="3. 发送邮件"></a>3. 发送邮件</h3><ul><li>直接输入正文<blockquote><p>echo “邮件正文” | mail -s “邮件主题(subject)” 邮箱地址</p></blockquote></li><li>正文在文件中<blockquote><p>mail -s “邮件主题(subject)” 邮箱地址 &lt; 邮件正文所在文件<br>cat file | mail -s “邮件主题(subject)” 邮箱地址</p></blockquote></li><li>发送附件<blockquote><p>mail -s “邮件主题(subject)” 邮箱地址 -a 附件</p></blockquote></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>阿里云服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客添加评论功能</title>
    <link href="/2019/07/17/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <url>/2019/07/17/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="yilia主题：gitment评论功能"><a href="#yilia主题：gitment评论功能" class="headerlink" title="yilia主题：gitment评论功能"></a>yilia主题：gitment评论功能</h1><p>下面主要讲述如何使用gitment给yilia主题添加评论功能</p><h2 id="1-Register-a-new-OAuth-application"><a href="#1-Register-a-new-OAuth-application" class="headerlink" title="1. Register a new OAuth application"></a>1. Register a new OAuth application</h2><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">注册OAuth</a><br><a id="more"></a></p><p><img src="https://gitee.com/huster_ning/image/raw/master/image/%E6%B3%A8%E5%86%8C.png" srcset="/img/loading.gif" alt="注册"></p><p>注册完成后能够得到<code>Client ID</code>和<code>Client Serect</code></p><h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h2><p>修改<code>themes/hexo-theme-yilia/_config.yml</code>下的配置文件（注意不是修改根目录下的_config.yml文件）<br>如下图所示<br><img src="https://gitee.com/huster_ning/image/raw/master/image/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" srcset="/img/loading.gif" alt="配置文件"><br>最后如果不出问题的话<code>hexo g</code> 、<code>hexo d</code>应该就行了</p><h2 id="3-解决一些遇到的bug"><a href="#3-解决一些遇到的bug" class="headerlink" title="3. 解决一些遇到的bug"></a>3. 解决一些遇到的bug</h2><h3 id="bug：github-api-error-redirect-uri-mismatch"><a href="#bug：github-api-error-redirect-uri-mismatch" class="headerlink" title="bug：github-api-error-redirect-uri-mismatch"></a>bug：github-api-error-redirect-uri-mismatch</h3><p><a href="https://stackoverflow.com/questions/34730153/github-api-error-redirect-uri-mismatch" target="_blank" rel="noopener">参考Stack Overflow</a></p><h3 id="bug：object-ProgressEvent"><a href="#bug：object-ProgressEvent" class="headerlink" title="bug：object ProgressEvent"></a>bug：object ProgressEvent</h3><p>由于服务器认证域名过期，修改服务器即可，<br>修改<code>themes/hexo-theme-yilia/layout/_partial/post/gitment.ejs</code>文件<br>将如下代码<br><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"//imsun.github.io/gitment/style/default.css"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div></p><p>修改成如下：<br><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/default.css"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/theme-next/theme-next-gitment@1/gitment.browser.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div></p><p><a href="https://sjq597.github.io/2018/05/18/Hexo-%E4%BD%BF%E7%94%A8Gitment%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">参考</a></p><h1 id="fluid主题：valine评论"><a href="#fluid主题：valine评论" class="headerlink" title="fluid主题：valine评论"></a>fluid主题：valine评论</h1><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改fluid主题目录下的<code>_config.yml</code>文件，如下所示开启评论并选择使用的评论模块为<code>valine</code></p><div class="hljs"><pre><code class="hljs yml"><span class="hljs-attr">comments:</span>  <span class="hljs-comment"># 评论</span><span class="hljs-attr">    enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 开启评论</span><span class="hljs-attr">    type:</span> <span class="hljs-string">valine</span></code></pre></div><p>然后修改<code>valine</code>模块中中的配置信息, 主要是修改appid、appkey、serverURLS这三处信息, 需要 <a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">注册LeanCloud</a>才能获取appid、appkey, 具体操作可参考<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">文档</a><br><div class="hljs"><pre><code class="hljs yml"><span class="hljs-comment"># Valine</span><span class="hljs-comment"># 完整文档 https://valine.js.org/configuration.html</span><span class="hljs-comment"># 注意：下列配置项中的 true/false 不要用引号括起来</span><span class="hljs-attr">valine:</span><span class="hljs-attr">  appid:</span> <span class="hljs-string">xxx</span>  <span class="hljs-comment"># 从 LeanCloud 的应用中得到的 appId</span><span class="hljs-attr">  appkey:</span> <span class="hljs-string">xxx</span>  <span class="hljs-comment"># 从 LeanCloud 的应用中得到的 APP Key</span><span class="hljs-attr">  placeholder:</span> <span class="hljs-string">说点什么</span> <span class="hljs-comment"># 评论框占位提示符</span><span class="hljs-attr">  path:</span> <span class="hljs-string">window.location.pathname</span> <span class="hljs-comment"># 当前文章页路径，用于区分不同的文章页，以保证正确读取该文章页下的评论列表</span><span class="hljs-attr">  avatar:</span> <span class="hljs-string">retro</span> <span class="hljs-comment"># Gravatar 头像展示方式</span><span class="hljs-attr">  meta:</span> <span class="hljs-string">['nick',</span> <span class="hljs-string">'mail'</span><span class="hljs-string">,</span> <span class="hljs-string">'link'</span><span class="hljs-string">]</span>  <span class="hljs-comment"># 评论者相关属性</span><span class="hljs-attr">  pageSize:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 评论列表分页，每页条数</span><span class="hljs-attr">  lang:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment"># zh-CN | zh-TW | en | ja</span><span class="hljs-attr">  highlight:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 代码高亮</span><span class="hljs-attr">  recordIP:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否记录评论者IP</span><span class="hljs-attr">  serverURLs:</span>  <span class="hljs-string">xxx</span> <span class="hljs-comment"># REST API 服务器地址，国际版不填</span></code></pre></div></p><h2 id="评论邮件提醒功能"><a href="#评论邮件提醒功能" class="headerlink" title="评论邮件提醒功能"></a>评论邮件提醒功能</h2><p>邮件提醒我使用的是<a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>，参考文档进行Git部署即可。但我在部署时出现了如下错误：</p><p><img src="https://gitee.com/huster_ning/image/raw/master//image/20200701132034.png" srcset="/img/loading.gif" alt=""></p><p>主要是因为Node版本太低了的缘故，需要修改项目中<code>package.json</code>文件中的Node版本，可以将项目fork到自己的仓库中，然后进行修改, 将<code>6.x</code>修改成<code>12.x</code>即可。</p><div class="hljs"><pre><code class="hljs json">"engines": &#123;    "node": "12.x"  &#125;</code></pre></div><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果fluid主题使用了覆盖配置，一定记得修改配置时是在<code>source/_data</code>目录下修改，不然配置会无效。</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java复习笔记</title>
    <link href="/2018/10/28/java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/10/28/java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="d763951ed02538d0c0477ac98a141ce710b711de88fff47b2fccfefd4d137733"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Map的遍历与排序</title>
    <link href="/2018/10/16/Map%E7%9A%84%E9%81%8D%E5%8E%86%E4%B8%8E%E6%8E%92%E5%BA%8F/"/>
    <url>/2018/10/16/Map%E7%9A%84%E9%81%8D%E5%8E%86%E4%B8%8E%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>引言：集合是java比较重要的一个知识点，而集合的遍历尤为重要。<br>  相对来说，Map又是集合中比较难懂的一部分，故今天来讲一下Map的<br>  遍历与排序。</p></blockquote><h2 id="Map的遍历"><a href="#Map的遍历" class="headerlink" title="Map的遍历"></a>Map的遍历</h2><ul><li><p>较为简单的遍历方法可以通过<code>keySet()</code>方法获取Map中的所有的<code>key</code>,<br>然后使用<code>get(key)</code>获取<code>key</code>对应的<code>value</code>,代码如下：</p><div class="hljs"><pre><code class="hljs java"> Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;(); map.put(<span class="hljs-string">"1"</span>,<span class="hljs-string">"xinger"</span>); <span class="hljs-comment">//······省略部分代码</span><span class="hljs-keyword">for</span>(String s : map.keySet())&#123;System.out.println(<span class="hljs-string">"key:"</span>+s+<span class="hljs-string">","</span>+<span class="hljs-string">"value:"</span>+map.get(s));&#125;</code></pre></div></li></ul><a id="more"></a><ul><li><p>通过Map.entrySet()遍历map：Map.entrySet()方法返回该地图的集合视图(<code>Set(Map.Entry&lt;K,V&gt;)</code>)</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(Map.Entry&lt;String, String&gt; entry : map.entrySet())&#123;  <span class="hljs-comment">//参数类型请灵活处理</span>System.out.println(<span class="hljs-string">"key:"</span>+entry.getKey()+<span class="hljs-string">","</span>+<span class="hljs-string">"value:"</span>+entry.getValue());&#125;</code></pre></div></li><li><p>通过迭代器遍历Map:</p><div class="hljs"><pre><code class="hljs java">Iterator(Map.Entry&lt;String, String&gt;) ite = map.entrySet().iterator();<span class="hljs-keyword">while</span>(ite.hasNext())&#123;Map.Entry&lt;String, String&gt; entry = ite.next();System.out.println(<span class="hljs-string">"key:"</span>+entry.getKey()+<span class="hljs-string">","</span>+<span class="hljs-string">"value:"</span>+entry.getValue());z&#125;</code></pre></div></li></ul><h2 id="Map的排序"><a href="#Map的排序" class="headerlink" title="Map的排序"></a>Map的排序</h2><ul><li><p>利用TreeMap类进行排序：<code>TreeMap</code>是默认按<code>key</code>的升序排序，若要改变排序方式，需要使用<strong>比较器</strong>：<code>Comparator</code><br>并使用构造器<code>TreeMap(Comparator&lt;? super K&gt; comparator)</code>,注意到泛型<code>? super K</code>,故本质还是进行按<code>key</code>排序。</p><div class="hljs"><pre><code class="hljs java">Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> TreeMap&lt;String, String&gt;(<span class="hljs-keyword">new</span> Comparator&lt;String&gt;()&#123;                <span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(String o1, String o2)</span> </span>&#123;<span class="hljs-keyword">return</span>  o2.compareTo(p1);&#125;);</code></pre></div></li><li><p>Map按value排序：实现Comparator接口，并重写<code>compare(Object o1, Object o2)</code>方法</p><div class="hljs"><pre><code class="hljs java">List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Map.Entry&lt;String, Integer&gt;&gt;(map.entrySet());   <span class="hljs-comment">//排序</span>   Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt;()&#123;<span class="hljs-comment">//内部类</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Entry&lt;String, Integer&gt; o1, Entry&lt;String, Integer&gt; o2)</span> </span>&#123;<span class="hljs-keyword">return</span> o2.getValue() - o1.getValue();&#125;      &#125;);</code></pre></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Collection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jdbc</title>
    <link href="/2018/10/05/jdbc/"/>
    <url>/2018/10/05/jdbc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-JDBC连接MySql"><a href="#1-JDBC连接MySql" class="headerlink" title="1.JDBC连接MySql"></a>1.JDBC连接MySql</h1><p>首先新建一个数据库，<code>create database new_database</code>,<code>use new_database</code>,<code>create new_table(.....)</code>,注意mysql命令<br>要有冒号作为一个语句的结束，然后需要下载驱动包，<a href="http://downloads.mysql.com/archives/c-j/" target="_blank" rel="noopener">http://downloads.mysql.com/archives/c-j/</a>, 解压导入到项目中即可</p><p><font color="#DC1818">注意：下面的代码中的<code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;)</code>    注册驱动文件 ，与网上的教程<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>有所区别，是由于驱动包版本不同所致，请注意区分</font><br><a id="more"></a><br><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySql</span> </span>&#123;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String url = <span class="hljs-string">"jdbc:mysql://localhost:3306/database_name?useSSL=false"</span>;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String user = <span class="hljs-string">"root"</span>;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String password = <span class="hljs-string">"xxxxxxx"</span>;<span class="hljs-comment">//the password of your mysql;</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;Connection con = <span class="hljs-keyword">null</span>; Statement statement = <span class="hljs-keyword">null</span>; <span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">//注册驱动文件</span> Class.forName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);  <span class="hljs-comment">//连接数据库</span> con = DriverManager.getConnection(url, user, password);<span class="hljs-comment">//查询</span> statement = con.createStatement(); String sql = <span class="hljs-string">"update websites set name='xinger' where id=6;"</span>; <span class="hljs-comment">//update</span> System.out.println(statement.executeUpdate(sql));  <span class="hljs-comment">//System.out.println(ret.toString());</span> sql = <span class="hljs-string">"select * from websites"</span>; ResultSet rs = statement.executeQuery(sql); <span class="hljs-keyword">while</span>(rs.next())&#123;         <span class="hljs-comment">//Retrieve by column name</span>         <span class="hljs-keyword">int</span> id  = rs.getInt(<span class="hljs-string">"id"</span>);         String name = rs.getString(<span class="hljs-string">"name"</span>);         String url = rs.getString(<span class="hljs-string">"url"</span>);         String country = rs.getString(<span class="hljs-string">"country"</span>);         <span class="hljs-comment">//Display values</span>         System.out.print(<span class="hljs-string">"id: "</span> + id);         System.out.print(<span class="hljs-string">",name:"</span> + name);         System.out.print(<span class="hljs-string">", url: "</span> + url);         System.out.println(<span class="hljs-string">", country: "</span> + country);      &#125; rs.close(); statement.close(); con.close();  &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123; System.out.println(e); &#125;  <span class="hljs-keyword">catch</span> (SQLException e) &#123; e.printStackTrace();&#125; &#125;&#125;</code></pre></div></p><h1 id="2-Statement接口"><a href="#2-Statement接口" class="headerlink" title="2.Statement接口"></a>2.Statement接口</h1><p>   需要使用<code>Connection</code>对象的<code>createStatement()</code>方法创建一个<code>Statement</code>对象；<br>   <code>Statement</code>中的方法：</p><p> <font color="#1EE4F1">boolean execute (String SQL)</font> 如果可以检索到ResultSet对象，则返回一个布尔值true; 否则返回false。使用此方法执行SQLDDL语句或需要使用真正的动态SQL，可使用于执行创建数据库，创建表的SQL语句等等。</p><p><font color="#1EE4F1">int executeUpdate (String SQL)</font>:返回受SQL语句执行影响的行数。使用此方法执行预期会影响多行的SQL语句，例如:INSERT，<br>UPDATE或DELETE语句。</p><p><font color="#1EE4F1">ResultSet executeQuery(String SQL)</font>：返回一个ResultSet对象。 当您希望获得结果集时，请使用此方法，就像使用SELECT语<br>句一样。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建个人博客系统</title>
    <link href="/2018/10/05/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    <url>/2018/10/05/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo-GitHub搭建个人博客"><a href="#Hexo-GitHub搭建个人博客" class="headerlink" title="Hexo+GitHub搭建个人博客"></a>Hexo+GitHub搭建个人博客</h1><h2 id="1-Hexo搭建GitHub-Pages"><a href="#1-Hexo搭建GitHub-Pages" class="headerlink" title="1.Hexo搭建GitHub Pages"></a>1.Hexo搭建GitHub Pages</h2><p>由于大部分过程官方文档中都有详细说明，本文不在讲述。我主要讲述一下如何搭建GitHub Pages:<br>首先在Hexo目录下找到配置文件_config.yml,然后修改deploy中的内容:</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-attribute">deploy</span>:  <span class="hljs-attribute">type</span>: git  <span class="hljs-attribute">repo</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/your_github_name/your_github_name.github.io.git</span>  <span class="hljs-attribute">branch</span>: master</code></pre></div><p>其中repo是你的github仓库网址<br>最后使用命令hexo s 生成静态文件，hexo d 发布博客</p><a id="more"></a><h2 id="2-更换博客主题"><a href="#2-更换博客主题" class="headerlink" title="2.更换博客主题"></a>2.更换博客主题</h2><p>   <a href="https://hexo.io/themes/" target="_blank" rel="noopener">themes</a>这个是官网提供的主题，而本人使用的主题是华科大佬写的<br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a>,比较美观，使用也比较方便。<br>    首先<code>git clone</code>到<code>themes</code>文件夹中，然后在主目录的<code>_config.yml</code><br>中找到theme,改成你说下载的theme名字即可，如图：<br><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-built_in">theme</span>: hexo-<span class="hljs-built_in">theme</span>-yilia</code></pre></div></p><p>最后<code>git pull</code>就好了</p><h2 id="3-在博客中加载图片"><a href="#3-在博客中加载图片" class="headerlink" title="3.在博客中加载图片"></a>3.在博客中加载图片</h2><p> 在<code>_config.yml</code>中找到<code>Writing</code>部分，将<code>post_asset_folder</code>改为<code>true</code>,<br> 这样每次<code>hexo new &quot;blog name&quot;</code>时都会自动新建一个同名的资源文件夹，将需<br> 要加载的图片放到该文件夹中,在博客中引用该图片就行了</p> <div class="hljs"><pre><code class="hljs undefined">&#123;% img [class names] image.jpg [width] [height] [title text [alt text]] %&#125;</code></pre></div><p>也可以这样引用<code>![](image.jpg)</code>(直接输入图片文件名即可)，但这个无法在首页中显示</p><h2 id="4-更换博客域名"><a href="#4-更换博客域名" class="headerlink" title="4.更换博客域名"></a>4.更换博客域名</h2><p> 作为一个学生党，直接买域名对我来说还是有点小贵，但GitHub给学生提供了一个开发大礼包，学生可以用学校的邮箱进行认证，<br><a href="https://education.github.com/" target="_blank" rel="noopener">申请网址</a>。这个开发大礼包中，对我来说主要有两个比较有用的东西，第一个就是学生可以<br>无限创建私有仓库，另外，可以使用<code>namaCheap</code>申请一个一年的免费域名(<code>.me</code>的顶级域名)，<a href="https://nc.me/" target="_blank" rel="noopener">申请网址</a>，<br>申请到域名后，就可以自定义设置<code>github pages</code>的域名了(代替<code>github.io</code>的域名)，具体操作参考<a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">git pages 官方文档</a> </p><h3 id="4-1-github-pages-with-https"><a href="#4-1-github-pages-with-https" class="headerlink" title="4.1 github pages with https"></a>4.1 github pages with https</h3><p>官方说明：<a href="https://help.github.com/en/github/working-with-github-pages/securing-your-github-pages-site-with-https" target="_blank" rel="noopener">github-pages=with-https</a></p><p>在repository的设置中勾选<code>Enforce HTTPS</code>即可，如果不能勾选，等一段时间即可。</p><p><img src="https://gitee.com/huster_ning/image/raw/master/image/Snipaste_2020-05-22_13-55-31.jpg" srcset="/img/loading.gif" alt="Snipaste_2020-05-22_13-55-31"></p><h3 id="4-2-更换域名的一些坑"><a href="#4-2-更换域名的一些坑" class="headerlink" title="4.2 更换域名的一些坑"></a>4.2 更换域名的一些坑</h3><ul><li><p>域名解析添加CNAME记录：</p><p><img src="https://gitee.com/huster_ning/image/raw/master/image/Snipaste_2020-05-22_13-15-10.jpg" srcset="/img/loading.gif" alt="Snipaste_2020-05-22_13-15-10"></p><p> CNAME:规范名字，允许将多个名字映射到同一台计算机上，即你可以使用多个域名指向同一服务器IP，在这里就是你既可以通过<br>‘github.io’这个域名，又可以通过<code>.me</code>域名访问你的博客。为了保证可以用两个域名访问同一个博客，应该新建一个<code>CNAME</code>文件<br>我新建文件的位置：<br><img src="https://gitee.com/huster_ning/image/raw/master/image/CNAME.PNG" srcset="/img/loading.gif" alt="CNAME"></p></li></ul><p>并写入你的域名，然后提交到github上去，如果直接在github中新建，之后提交博客可能<code>覆盖</code>该文件，导致博客无法访问</p><h2 id="5-插入视频"><a href="#5-插入视频" class="headerlink" title="5.插入视频"></a>5.插入视频</h2><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"560"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"315"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.youtube.com/embed/Ilg3gGewQ5U"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">allowfullscreen</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></code></pre></div><iframe width="60%" height="315" display="block" src="https://www.youtube.com/embed/Ilg3gGewQ5U" frameborder="0" allowfullscreen></iframe><h2 id="6-写博客"><a href="#6-写博客" class="headerlink" title="6.写博客"></a>6.写博客</h2><p>使用如下命令创建一篇新的文章：<br><div class="hljs"><pre><code class="hljs undefined">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;</code></pre></div></p><p>文章有三种布局：post、page、draft，默认布局是post，draft布局在部署时不发布，可以使用<code>hexo public</code>进行发布，不同的布局保存在不同的文件夹下。</p><div class="table-container"><table><thead><tr><th>布局</th><th>目录</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>draft</td><td>source/_drafts</td></tr><tr><td>page</td><td>source</td></tr></tbody></table></div><p>本文主要参考了<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo 文档</a><code>&amp;</code><a href="https://github.com/litten/BlogBackup" target="_blank" rel="noopener">BlogBackup</a></p><h1 id="服务器部署Hexo博客系统"><a href="#服务器部署Hexo博客系统" class="headerlink" title="服务器部署Hexo博客系统"></a>服务器部署Hexo博客系统</h1><p>部署原理很简单，实际上就是将Hexo生成的public目录上传到了服务器上。在服务器上面需要完成的工作：创建一个git用户、创建git裸仓库、配置钩子函数、nginx配置；在本地需要完成的工作：修改配置文件的部署信息、配置免密登录。</p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>创建一个名为<code>git</code>的普通用户，而不是使用root用户，是为了限制用户的权限。创建用户的过程可以<a href="https://www.ningxin.site/2020/07/04/Linux用户" target="_blank" rel="noopener">参考</a></p><h2 id="创建git裸仓库配置钩子函数"><a href="#创建git裸仓库配置钩子函数" class="headerlink" title="创建git裸仓库配置钩子函数"></a>创建git裸仓库配置钩子函数</h2><p>裸仓库只包括<code>.git</code>文件，主要是关于仓库的修改信息，而不包括工作树。如下创建一个<code>blog.git</code>的仓库</p><div class="hljs"><pre><code class="hljs undefined">git init <span class="hljs-comment">--bare blog.git</span></code></pre></div><p>使用钩子函数是为了从裸仓库中恢复工作树。在<code>blog.git/hooks/</code>目录下创建<code>post-receive</code>文件, 即使用<code>post-receive</code>钩子，<code>post-receive</code>钩子是服务端钩子，在整个过程完成后运行，具体可以参考<a href="[https://www.git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90](https://www.git-scm.com/book/zh/v2/自定义-Git-Git-钩子">git钩子</a>)。然后在<code>post-receive</code>文件中写入以下内容：</p><div class="hljs"><pre><code class="hljs undefined">git <span class="hljs-attribute">--work-tree</span>=blog <span class="hljs-attribute">--git-dir</span>=blog.git checkout -f</code></pre></div><h2 id="修改配置信息"><a href="#修改配置信息" class="headerlink" title="修改配置信息"></a>修改配置信息</h2><p>在<code>_config.yml</code>文件中修改deploy中的信息：</p><div class="hljs"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><span class="hljs-attr">  type:</span> <span class="hljs-string">git</span><span class="hljs-attr">  repo:</span> <span class="hljs-string">git@服务器IP地址:仓库地址</span><span class="hljs-attr">  branch:</span> <span class="hljs-string">master</span></code></pre></div><h2 id="ssh免密登录"><a href="#ssh免密登录" class="headerlink" title="ssh免密登录"></a>ssh免密登录</h2><p>在本地<code>Git Bash</code>中使用<code>ssh-keygen</code>命令生成密钥，默认保存在<code>C:/users/username/.ssh/id_rsa</code>目录中。使用<code>ssh-copy-id -i</code>将<code>id_rsa.pub</code>（即公钥）添加到服务器。</p><div class="hljs"><pre><code class="hljs powershell">ssh-copy-id -i ~/.ssh/id_rsa.pub your_user_name@HostIP  //添加公钥ssh your_user_name@HostIP //验证是否添加成功</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
